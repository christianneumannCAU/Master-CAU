# find Data near Target and far from target
near <- rep(0,30)
far <- rep(0,30)
AP_n <- rep(0,30)
AP_f <- rep(0,30)
beta_n <- rep(0,30)
beta_f <- rep(0,30)
for(i in 1:30) {
idx <-  rg_tab$ID == i
near[i] <- min(rg_tab$distance[idx])
far[i] <- max(rg_tab$distance[idx])
idx_n <- rg_tab$distance == near[i]
idx_f <- rg_tab$distance == far[i]
AP_n[i] <- rg_tab$z_exp[idx_n]
AP_f[i] <- rg_tab$z_exp[idx_f]
beta_n[i] <- rg_tab$z_beta[idx_n]
beta_f[i] <- rg_tab$z_beta
}
AP_f
AP_n
plot(AP_f)
plot(AP_n)
plot(beta_f)
plot(beta_n)
View(rg_tab)
View(rg_tab)
min(rg_tab$distance[idx]
min(rg_tab$distance[idx]
min(rg_tab$distance[idx]
)
near
View(rg_tab)
View(rg_tab)
z_exp
AP_n
plot(AP_n)
plot(AP_f)
idx_f
far
AP_f
rg_tab$AP_EXPONENT[near[1]]
rg_tab$distance[near[1]]
near[1]
rg_tab$distance == near[1]
View(rg_tab)
View(rg_tab)
idx_n <- rg_tab$distance == near[i]
rg_tab$z_exp[idx_n]
max(rg_tab$distance[idx]
)
far
rg_tab$distance == far[2]
rg_tab$distance[idx] == far[2]
rg_tab$distance[idx] == far[1]
# find Data near Target and far from target
near <- 0
far <- 0
for(i in 1:30) {
idx <-  rg_tab$ID == i
idx_n <- rg_tab$distance[idx] == min(rg_tab$distance[idx])
idx_f <- rg_tab$distance[idx] == max(rg_tab$distance[idx])
AP_n[i] <- rg_tab$z_exp[idx_n]
beta_n[i] <- rg_tab$z_beta[idx_n]
}
AP_f
AP_n
plot(AP_n)
plot(beta_n)
# find Data near Target and far from target
near <- 0
far <- 0
for(i in 1:30) {
idx <-  rg_tab$ID == i
idx_n <- rg_tab$distance[idx] == min(rg_tab$distance[idx])
idx_f <- rg_tab$distance[idx] == max(rg_tab$distance[idx])
AP_n[i] <- rg_tab$z_exp[idx_n]
beta_n[i] <- rg_tab$z_beta[idx_n]
AP_f[i] <- rg_tab$z_exp[idx_f]
beta_f[i] <- rg_tab$z_beta[idx_f]
}
plot(AP_f)
plot(beta_f)
plot(beta_n)
plot(beta_f)
plot(AP_f)
plot(AP_n)
rm(idx_f)
rm(rdx_n)
rm(idx_n)
(AP_f)
rm(AP_f)
rm(AP_n)
rm(far)
rm(near)
rm(beta_f)
rm(beta_n)
# find Data near Target and far from target
AP_n <- 0
AP_f <- 0
for(i in 1:30) {
idx <-  rg_tab$ID == i
AP_n <- rg_tab$z_exp[rg_tab$distance[idx] == min(rg_tab$distance[idx])]
AP_f <- rg_tab$z_exp[rg_tab$distance[idx] == max(rg_tab$distance[idx])]
}
AP_f
plot(AP_f)
plot(AP_n)
# find Data near Target and far from target
AP_n <- 0
AP_f <- 0
beta_n <- 0
beta_f <- 0
for(i in 1:30) {
idx <-  rg_tab$ID == i
AP_n <- rg_tab$z_exp[rg_tab$distance[idx] == min(rg_tab$distance[idx])]
AP_f <- rg_tab$z_exp[rg_tab$distance[idx] == max(rg_tab$distance[idx])]
beta_n <- rg_tab$z_beta[rg_tab$distance[idx] == min(rg_tab$distance[idx])]
beta_f <- rg_tab$z_beta[rg_tab$distance[idx] == max(rg_tab$distance[idx])]
}
plot(beta_f)
plot(beta_n)
max(rg_tab$distance[1])
View(rg_tab)
max(rg_tab$distance[idx])
rg_tab$distance[idx] == max(rg_tab$distance[idx])
rg_tab$z_beta[rg_tab$distance[idx] == max(rg_tab$distance[idx])]
# find Data near Target and far from target
AP_n <- 0
AP_f <- 0
beta_n <- 0
beta_f <- 0
for(i in 1:30) {
idx <-  rg_tab$ID == i
AP_n <- rg_tab$z_exp[rg_tab$distance == min(rg_tab$distance[idx])]
AP_f <- rg_tab$z_exp[rg_tab$distance == max(rg_tab$distance[idx])]
beta_n <- rg_tab$z_beta[rg_tab$distance == min(rg_tab$distance[idx])]
beta_f <- rg_tab$z_beta[rg_tab$distance == max(rg_tab$distance[idx])]
}
AP_f
# find Data near Target and far from target
AP_n <- 0
AP_f <- 0
beta_n <- 0
beta_f <- 0
for(i in 1:30) {
idx <-  rg_tab$ID == i
AP_n <- rg_tab$z_exp[rg_tab$distance == min(rg_tab$distance[idx] & rg_tab$ID == i)]
AP_f <- rg_tab$z_exp[rg_tab$distance == max(rg_tab$distance[idx] & rg_tab$ID == i)]
beta_n <- rg_tab$z_beta[rg_tab$distance == min(rg_tab$distance[idx] & rg_tab$ID == i)]
beta_f <- rg_tab$z_beta[rg_tab$distance == max(rg_tab$distance[idx] & rg_tab$ID == i)]
}
# find Data near Target and far from target
AP_n <- 0
AP_f <- 0
beta_n <- 0
beta_f <- 0
for(i in 1:30) {
idx <-  rg_tab$ID == i
AP_n[i] <- rg_tab$z_exp[rg_tab$distance == min(rg_tab$distance[idx] & rg_tab$ID == i)]
AP_f[i] <- rg_tab$z_exp[rg_tab$distance == max(rg_tab$distance[idx] & rg_tab$ID == i)]
beta_n[i] <- rg_tab$z_beta[rg_tab$distance == min(rg_tab$distance[idx] & rg_tab$ID == i)]
beta_f[i] <- rg_tab$z_beta[rg_tab$distance == max(rg_tab$distance[idx] & rg_tab$ID == i)]
}
# find Data near Target and far from target
AP_n <- 0
AP_f <- 0
beta_n <- 0
beta_f <- 0
for(i in 1:30) {
idx <-  rg_tab$ID == i
AP_n{i} <- rg_tab$z_exp[rg_tab$distance == min(rg_tab$distance[idx] & rg_tab$ID == i)]
AP_f{i} <- rg_tab$z_exp[rg_tab$distance == max(rg_tab$distance[idx] & rg_tab$ID == i)]
beta_n{i} <- rg_tab$z_beta[rg_tab$distance == min(rg_tab$distance[idx] & rg_tab$ID == i)]
beta_f{i} <- rg_tab$z_beta[rg_tab$distance == max(rg_tab$distance[idx] & rg_tab$ID == i)]
}
for(i in 1:30) {
idx <-  rg_tab$ID == i
AP_n(i) <- rg_tab$z_exp[rg_tab$distance == min(rg_tab$distance[idx] & rg_tab$ID == i)]
AP_f(i) <- rg_tab$z_exp[rg_tab$distance == max(rg_tab$distance[idx] & rg_tab$ID == i)]
beta_n(i) <- rg_tab$z_beta[rg_tab$distance == min(rg_tab$distance[idx] & rg_tab$ID == i)]
beta_f(i) <- rg_tab$z_beta[rg_tab$distance == max(rg_tab$distance[idx] & rg_tab$ID == i)]
}
for(i in 1:30) {
idx <-  rg_tab$ID == i
AP_n[i] <- rg_tab$z_exp[rg_tab$distance == min(rg_tab$distance[idx] & rg_tab$ID == i)]
AP_f[i] <- rg_tab$z_exp[rg_tab$distance == max(rg_tab$distance[idx] & rg_tab$ID == i)]
beta_n[i] <- rg_tab$z_beta[rg_tab$distance == min(rg_tab$distance[idx] & rg_tab$ID == i)]
beta_f[i] <- rg_tab$z_beta[rg_tab$distance == max(rg_tab$distance[idx] & rg_tab$ID == i)]
}
summary(full_model)
## exploring ##
# regression is robust (source), data is close to normal distribution
full_model <- lme(fixed=distance ~ z_exp + z_theta + z_alpha + z_beta, random=~1|ID, data=rg_tab)
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
## exploring ##
# regression is robust (source), data is close to normal distribution
full_model <- lme(fixed=distance ~ z_exp + z_theta + z_alpha + z_beta, random=~1|ID, data=rg_tab)
summary(full_model)
View(rg_tab)
## exploring ##
cor.test(rg_tab$DEPTH,rg_tab$z_beta, method = "kendall")
## exploring ##
# regression is robust (source), data is close to normal distribution
full_model <- lme(fixed=distance ~ z_exp + z_theta + z_alpha + z_beta, random=~1|ID, data=rg_tab)
summary(full_model)
anova(full_model)
## exploring ##
# regression is robust (source), data is close to normal distribution
full_model_distance <- lme(fixed=distance ~ z_exp + z_theta + z_alpha + z_beta, random=~1|ID, data=rg_tab)
summary(full_model)
anova(full_model)
rm(full_model)
## exploring ##
# regression is robust (source), data is close to normal distribution
full_model_distance <- lme(fixed=distance ~ z_exp + z_theta + z_alpha + z_beta, random=~1|ID, data=rg_tab)
summary(full_model_distance)
anova(full_model_distance)
full_model_depth <- lme(fixed=distance ~ z_exp + z_theta + z_alpha + z_beta, random=~1|ID, data=rg_tab)
summary(full_model_depth)
anova(full_model_depth)
full_model_depth <- lme(fixed=DEPTH ~ z_exp + z_theta + z_alpha + z_beta, random=~1|ID, data=rg_tab)
summary(full_model_depth)
anova(full_model_depth)
summary(full_model_distance)
anova(full_model_distance)
full_model_depth <- lme(fixed=DEPTH ~ z_exp + z_theta + z_alpha + z_beta, random=~1|ID, data=rg_tab)
summary(full_model_depth)
full_model_depth <- lme(fixed=DEPTH ~ z_exp + z_theta + z_alpha + z_beta, random=~1|ID, data=rg_tab)
summary(full_model_depth)
anova(full_model_depth)
ggscatter(rg_tab, x = "DEPTH", y = "z_exp", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "distance to STN", ylab = "aperiodic exponent")
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
ggscatter(rg_tab, x = "DEPTH", y = "z_exp", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "distance to STN", ylab = "aperiodic exponent")
#visualize data
ggscatter(rg_tab, x = "distance", y = "z_beta", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "distance to STN", ylab = "beta power")
summary(full_model_distance)
anova(full_model_distance)
#aperiodic exponent is significant!
ggscatter(rg_tab, x = "DEPTH", y = "z_exp", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "distance to STN", ylab = "aperiodic exponent")
#visualize data
ggscatter(rg_tab, x = "distance", y = "z_beta", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "distance to STN", ylab = "beta power")
#aperiodic exponent is significant!
ggscatter(rg_tab, x = "DEPTH", y = "z_theta", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "distance to STN", ylab = "theta power")
ggdensity(rg_tab, x = "DEPTH", fill = "lightgray", title = "Depth of electrode") +
scale_x_continuous(limits = c(-20, 20)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
summary(full_model_distance)
anova(full_model_distance)
#aperiodic exponent is significant!
ggscatter(rg_tab, x = "DEPTH", y = "z_exp", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "distance to STN", ylab = "aperiodic exponent")
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
#aperiodic exponent is significant!
ggscatter(rg_tab, x = "DEPTH", y = "z_exp", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "distance to STN", ylab = "aperiodic exponent")
#aperiodic exponent is significant!
ggscatter(rg_tab, x = "DEPTH", y = "z_exp", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "depth of electrode", ylab = "aperiodic exponent")
tt_tab <- read.csv("../02_data/04_final/ttest_table.csv")
View(tt_tab)
View(tt_tab)
View(tt_tab)
i = 1
idx <-  rg_tab$ID == i
beta_id[i] <- rg_tab$z_beta(idx)
tt_tab <- read.csv("../02_data/04_final/ttest_table.csv")
View(tt_tab)
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
## read data ##
rg_tab <- read.csv("../02_data/04_final/regression_table.csv")
tt_tab <- read.csv("../02_data/04_final/ttest_table.csv")
## Add new variable for distance to target (got determined by MRT beforehand - the Depth 0 is the target)##
rg_tab$distance <- abs(rg_tab$DEPTH)
## Assign data types ##
rg_tab$ID <- as.factor(rg_tab$ID)
rg_tab$SIDE <- as.factor(rg_tab$SIDE)
rg_tab$CHANNEL <- as.factor(rg_tab$CHANNEL)
## Test for normal distribution is bad: gets significant automatically with big samplesize ##
shapiro.test(rg_tab$AP_EXPONENT)
# AP_EXPONENT
hist(rg_tab$AP_EXPONENT)
qqnorm(rg_tab$AP_EXPONENT)
qqline(rg_tab$AP_EXPONENT)
ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# THETA_POWER
hist(rg_tab$THETA_POWER)
qqnorm(rg_tab$THETA_POWER)
qqline(rg_tab$THETA_POWER)
ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
hist(rg_tab$ALPHA_POWER)
qqnorm(rg_tab$ALPHA_POWER)
qqline(rg_tab$ALPHA_POWER)
ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
hist(rg_tab$BETA_POWER)
qqnorm(rg_tab$BETA_POWER)
qqline(rg_tab$BETA_POWER)
ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# AP_EXPONENT
hist(rg_tab$z_exp)
qqnorm(rg_tab$z_exp)
qqline(rg_tab$z_exp)
ggdensity(rg_tab, x = "z_exp", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# THETA_POWER
hist(rg_tab$z_theta)
qqnorm(rg_tab$z_theta)
qqline(rg_tab$z_theta)
ggdensity(rg_tab, x = "z_theta", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
hist(rg_tab$z_alpha)
qqnorm(rg_tab$z_alpha)
qqline(rg_tab$z_alpha)
ggdensity(rg_tab, x = "z_alpha", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
hist(rg_tab$z_beta)
qqnorm(rg_tab$z_beta)
qqline(rg_tab$z_beta)
ggdensity(rg_tab, x = "z_beta", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
## try log-transformation ##
rg_tab$l_theta <- log10(rg_tab$THETA_POWER)
rg_tab$l_alpha <- log10(rg_tab$ALPHA_POWER)
rg_tab$l_beta <- log10(rg_tab$BETA_POWER)
# THETA_POWER
ggdensity(rg_tab, x = "l_theta", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
ggdensity(rg_tab, x = "l_beta", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# we can't assume normal distribution for distance
hist(rg_tab$distance)
qqnorm(rg_tab$distance)
qqline(rg_tab$distance)
ggdensity(rg_tab, x = "distance", fill = "lightgray", title = "Distance to STN") +
scale_x_continuous(limits = c(-20, 20)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
## read data ##
rg_tab <- read.csv("../02_data/04_final/regression_table.csv")
tt_tab <- read.csv("../02_data/04_final/ttest_table.csv")
## Add new variable for distance to target (got determined by MRT beforehand - the Depth 0 is the target)##
rg_tab$distance <- abs(rg_tab$DEPTH)
## Assign data types ##
rg_tab$ID <- as.factor(rg_tab$ID)
rg_tab$SIDE <- as.factor(rg_tab$SIDE)
rg_tab$CHANNEL <- as.factor(rg_tab$CHANNEL)
## Test for normal distribution is bad: gets significant automatically with big samplesize ##
shapiro.test(rg_tab$AP_EXPONENT)
# AP_EXPONENT
hist(rg_tab$AP_EXPONENT)
qqnorm(rg_tab$AP_EXPONENT)
qqline(rg_tab$AP_EXPONENT)
ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# THETA_POWER
hist(rg_tab$THETA_POWER)
qqnorm(rg_tab$THETA_POWER)
qqline(rg_tab$THETA_POWER)
ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
hist(rg_tab$ALPHA_POWER)
qqnorm(rg_tab$ALPHA_POWER)
qqline(rg_tab$ALPHA_POWER)
ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
hist(rg_tab$BETA_POWER)
qqnorm(rg_tab$BETA_POWER)
qqline(rg_tab$BETA_POWER)
ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# root mean square
hist(rg_tab$root_mean_square)
qqnorm(rg_tab$root_mean_square)
qqline(rg_tab$root_mean_square)
ggdensity(rg_tab, x = "root_mean_square", fill = "lightgray", title = "root_mean_square") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# AP_EXPONENT
hist(rg_tab$z_exp)
qqnorm(rg_tab$z_exp)
qqline(rg_tab$z_exp)
ggdensity(rg_tab, x = "z_exp", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# THETA_POWER
hist(rg_tab$z_theta)
qqnorm(rg_tab$z_theta)
qqline(rg_tab$z_theta)
ggdensity(rg_tab, x = "z_theta", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
hist(rg_tab$z_alpha)
qqnorm(rg_tab$z_alpha)
qqline(rg_tab$z_alpha)
ggdensity(rg_tab, x = "z_alpha", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
hist(rg_tab$z_beta)
qqnorm(rg_tab$z_beta)
qqline(rg_tab$z_beta)
ggdensity(rg_tab, x = "z_beta", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# root mean square
hist(rg_tab$z_rms)
qqnorm(rg_tab$z_rms)
qqline(rg_tab$z_rms)
ggdensity(rg_tab, x = "z_rms", fill = "lightgray", title = "root mean square") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
View(rg_tab)
## try log-transformation ##
rg_tab$l_theta <- log10(rg_tab$THETA_POWER)
rg_tab$l_alpha <- log10(rg_tab$ALPHA_POWER)
rg_tab$l_beta <- log10(rg_tab$BETA_POWER)
# THETA_POWER
ggdensity(rg_tab, x = "l_theta", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
ggdensity(rg_tab, x = "l_beta", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# we can't assume normal distribution for distance
hist(rg_tab$distance)
qqnorm(rg_tab$distance)
qqline(rg_tab$distance)
ggdensity(rg_tab, x = "distance", fill = "lightgray", title = "Distance to target") +
scale_x_continuous(limits = c(-20, 20)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
#visualize data
ggscatter(rg_tab, x = "distance", y = "z_beta", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "distance to STN", ylab = "beta power")
# kendall correlation which is non-parametric (spearman has issues with ties)
H <- cor.test(rg_tab$distance,rg_tab$z_beta, method = "kendall")
H
## exploring ##
# regression is robust (source), data is close to normal distribution
full_model_distance <- lme(fixed=distance ~ z_exp + z_theta + z_alpha + z_beta, random=~1|ID, data=rg_tab)
summary(full_model_distance)
anova(full_model_distance)
full_model_depth <- lme(fixed=DEPTH ~ z_exp + z_theta + z_alpha + z_beta, random=~1|ID, data=rg_tab)
summary(full_model_depth)
anova(full_model_depth)
#aperiodic exponent is significant!
ggscatter(rg_tab, x = "DEPTH", y = "z_exp", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "depth of electrode", ylab = "aperiodic exponent")
#Ein deutlich niedrigerer aperiodischer Exponent bei -5, FALLS 0 die Spitze der Elektrode ist,
#dann wäre -5 exakt da, wo die Elektrode sich genau im STN befindet (IST DAS SO?)
# (Theta auch)
ggscatter(rg_tab, x = "DEPTH", y = "z_theta", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "distance to STN", ylab = "theta power")
