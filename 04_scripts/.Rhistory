ab <- rbind(tt_tab$near_beta,tt_tab$far_beta)
View(ab)
ab <- rbind(t(tt_tab$near_beta),t(tt_tab$far_beta))
t(tt_tab$near_beta)
tt_tab$near_beta
ab <- data.frame(tt_tab$near_beta)
ab <- data.frame(tt_tab$near_beta,c(rep('near',30)))
ac <- data.frame(tt_tab$far_beta,c(rep('far',30)))
ad <- rbind(ab,ac)
#boxplot
c1 <- data.frame(tt_tab$near_beta,c(rep('near',30)))
colnames(c1) <- c("Beta", "Bedingung")
rm(ab)
am(ac)
rm(ac)
rm(c1)
#boxplot
beta_col1 <- data.frame(tt_tab$near_beta,c(rep('near',30)))
colnames(beta_col1) <- c("Beta", "Bedingung")
View(beta_col1)
beta_col2 <- data.frame(tt_tab$far_beta,c(rep('far',30)))
colnames(beta_col2) <- c("Beta", "Bedingung")
View(beta_col2)
t_beta_plot <- rbind(beta_col1,beta_col2)
View(t_beta_plot)
ggplot(t_beta_plot, aes(x=Bedingung, y=Beta)) +
geom_boxplot()
#boxplot
rms_col1 <- data.frame(tt_tab$near_rms,c(rep('near',30)))
colnames(rms_col1) <- c("Quadratisches Mittel", "Bedingung")
rms_col2 <- data.frame(tt_tab$far_rms,c(rep('far',30)))
colnames(rms_col2) <- c("Quadratisches Mittel", "Bedingung")
t_rms_plot <- rbind(rms_col1,rms_col2)
ggplot(t_rms_plot, aes(x=Bedingung, y=Quadratisches Mittel)) +
geom_boxplot()
#boxplot
rms_col1 <- data.frame(tt_tab$near_rms,c(rep('near',30)))
colnames(rms_col1) <- c("Quadratisches_Mittel", "Bedingung")
rms_col2 <- data.frame(tt_tab$far_rms,c(rep('far',30)))
colnames(rms_col2) <- c("Quadratisches_Mittel", "Bedingung")
t_rms_plot <- rbind(rms_col1,rms_col2)
ggplot(t_rms_plot, aes(x=Bedingung, y=Quadratisches_Mittel)) +
geom_boxplot()
#boxplot
beta_col1 <- data.frame(tt_tab$near_beta,c(rep('near',30)))
colnames(beta_col1) <- c("Betapower", "Bedingung")
beta_col2 <- data.frame(tt_tab$far_beta,c(rep('far',30)))
colnames(beta_col2) <- c("Betapower", "Bedingung")
t_beta_plot <- rbind(beta_col1,beta_col2)
ggplot(t_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot()
#boxplot
exp_col1 <- data.frame(tt_tab$near_exp,c(rep('near',30)))
colnames(exp_col1) <- c("Aperiodischer_Exponent", "Bedingung")
exp_col2 <- data.frame(tt_tab$far_exp,c(rep('far',30)))
colnames(exp_col2) <- c("Aperiodischer_Exponent", "Bedingung")
t_exp_plot <- rbind(exp_col1,exp_col2)
ggplot(t_rms_plot, aes(x=Bedingung, y=Aperiodischer_Exponent)) +
geom_boxplot()
View(t_exp_plot)
#boxplot
exp_col1 <- data.frame(tt_tab$near_exp,c(rep('near',30)))
colnames(exp_col1) <- c("Aperiodischer_Exponent", "Bedingung")
exp_col2 <- data.frame(tt_tab$far_exp,c(rep('far',30)))
colnames(exp_col2) <- c("Aperiodischer_Exponent", "Bedingung")
t_exp_plot <- rbind(exp_col1,exp_col2)
ggplot(t_exp_plot, aes(x=Bedingung, y=Aperiodischer_Exponent)) +
geom_boxplot()
#boxplot
beta_col1 <- data.frame(tt_tab$near_beta,c(rep('"nah"',30)))
colnames(beta_col1) <- c("Betapower", "Bedingung")
beta_col2 <- data.frame(tt_tab$far_beta,c(rep('"fern"',30)))
colnames(beta_col2) <- c("Betapower", "Bedingung")
t_beta_plot <- rbind(beta_col1,beta_col2)
ggplot(t_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot()
#boxplot
rms_col1 <- data.frame(tt_tab$near_rms,c(rep('"nah"',30)))
colnames(rms_col1) <- c("Quadratisches_Mittel", "Bedingung")
rms_col2 <- data.frame(tt_tab$far_rms,c(rep('"fern"',30)))
colnames(rms_col2) <- c("Quadratisches_Mittel", "Bedingung")
t_rms_plot <- rbind(rms_col1,rms_col2)
ggplot(t_rms_plot, aes(x=Bedingung, y=Quadratisches_Mittel)) +
geom_boxplot()
#boxplot
exp_col1 <- data.frame(tt_tab$near_exp,c(rep('"nah"',30)))
colnames(exp_col1) <- c("Aperiodischer_Exponent", "Bedingung")
exp_col2 <- data.frame(tt_tab$far_exp,c(rep('"fern"',30)))
colnames(exp_col2) <- c("Aperiodischer_Exponent", "Bedingung")
t_exp_plot <- rbind(exp_col1,exp_col2)
ggplot(t_exp_plot, aes(x=Bedingung, y=Aperiodischer_Exponent)) +
geom_boxplot()
#boxplot
theta_col1 <- data.frame(tt_tab$near_theta,c(rep('"nah"',30)))
colnames(theta_col1) <- c("Thetapower", "Bedingung")
theta_col2 <- data.frame(tt_tab$far_theta,c(rep('"fern"',30)))
colnames(theta_col2) <- c("Thetapower", "Bedingung")
t_theta_plot <- rbind(theta_col1,theta_col2)
ggplot(t_theta_plot, aes(x=Bedingung, y=Thetapower)) +
geom_boxplot()
ggplot(t_beta_plot, aes(x=Bedingung, y=Betapower), ylab = "Betapower (µV)") +
geom_boxplot()
ggplot(t_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
ggplot(t_theta_plot, aes(x=Bedingung, y=Thetapower)) +
geom_boxplot() + labs(y = "Thetapower (µV)")
#boxplot
alpha_col1 <- data.frame(tt_tab$near_alpha,c(rep('"nah"',30)))
colnames(alpha_col1) <- c("Alphapower", "Bedingung")
alpha_col2 <- data.frame(tt_tab$far_alpha,c(rep('"fern"',30)))
colnames(alpha_col2) <- c("Alphapower", "Bedingung")
t_alpha_plot <- rbind(alpha_col1,alpha_col2)
ggplot(t_alpha_plot, aes(x=Bedingung, y=Alphapower)) +
geom_boxplot() + labs(y = "Alphapower (µV)")
#boxplot
d_beta_col1 <- data.frame(ttd$near_beta,c(rep('"nah"',30)))
colnames(d_beta_col1) <- c("Betapower", "Bedingung")
d_beta_col2 <- data.frame(ttd$far_beta,c(rep('"fern"',30)))
colnames(d_beta_col2) <- c("Betapower", "Bedingung")
t_d_beta_plot <- rbind(d_beta_col1,d_beta_col2)
ggplot(t_d_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
ggplot(t_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
ggplot(t_rms_plot, aes(x=Bedingung, y=Quadratisches_Mittel)) +
geom_boxplot() + labs(y = "Quadratisches Mittel")
ggplot(t_exp_plot, aes(x=Bedingung, y=Aperiodischer_Exponent)) +
geom_boxplot() + labs(y = "Aperiodischer Exponent")
# both boxplots
ggarrange(thetabox, alphabox, ncol = 2, nrow = 1)
thetabox <- ggplot(t_theta_plot, aes(x=Bedingung, y=Thetapower)) +
geom_boxplot() + labs(y = "Thetapower (µV)")
alphabox <- ggplot(t_alpha_plot, aes(x=Bedingung, y=Alphapower)) +
geom_boxplot() + labs(y = "Alphapower (µV)")
# both boxplots
ggarrange(thetabox, alphabox, ncol = 2, nrow = 1)
ggplot(t_d_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
summary(full_model_depth)
## Set libraries ##
library(grid)
library(gridExtra)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
anova(full_model_depth)
library(lme4)
install.packages('lme4')
install.packages("lme4")
library(lme4)
lmer()
?lmer
test <- lme(fixed=DEPTH ~ z_exp + z_rms + z_alpha + z_theta, random=~1|ID, data=rg_tab)
test <- lmer(fixed=DEPTH ~ z_exp + z_rms + z_alpha + z_theta, random=~1|ID, data=rg_tab)
test <- lmer(DEPTH ~ 1 + (1/z_exp) + (1/z_rms) + (1/z_alpha) + (1/z_theta) + (1/z_beta), data=rg_tab)
test <- lmer(DEPTH ~ 1 + z_exp + z_rms + z_alpha + z_theta + z_beta + (1|ID), data=rg_tab)
summary(test)
summary(full_model_depth)
confint(test)
summary(test)
summary(full_model_depth)
anova(full_model_depth)
summary(full_model_depth)
anova(full_model_depth)
summary(full_model_depth)
test <- lmer(DEPTH ~ 1 + z_exp + z_rms + z_alpha + z_theta + z_beta + (1|ID), data=rg_tab)
library(lme4)
test <- lmer(DEPTH ~ 1 + z_exp + z_rms + z_alpha + z_theta + z_beta + (1|ID), data=rg_tab)
summary(test)
confint(test)
anova(test)
anova(full_model_depth)
# regression is robust (source), data is close to normal distribution
full_model_depth <- lme(fixed=DEPTH ~ z_exp, random=~1|ID, data=rg_tab)
library(nlme)
# regression is robust (source), data is close to normal distribution
full_model_depth <- lme(fixed=DEPTH ~ z_exp, random=~1|ID, data=rg_tab)
summary(full_model_depth)
anova(full_model_depth)
library(lme4)
# regression is robust (source), data is close to normal distribution
full_model_depth <- lme(fixed=DEPTH ~ z_exp + z_rms + z_alpha + z_theta, random=~1|ID, data=rg_tab)
summary(full_model_depth)
anova(full_model_depth)
test <- lmer(DEPTH ~ 1 + z_exp + (1|ID), data=rg_tab)
summary(test)
confint(test)
# regression is robust (source), data is close to normal distribution
full_model_depth <- lme(fixed=DEPTH ~ z_exp + z_rms, random=~1|ID, data=rg_tab)
summary(full_model_depth)
anova(full_model_depth)
test <- lmer(DEPTH ~ 1 + z_exp + z_rms + (1|ID), data=rg_tab)
confint(test)
rm(full_model_depth)
## regression is robust (source), data is close to normal distribution
h2reg <- lme(fixed=DEPTH ~ z_exp, random=~1|ID, data=rg_tab)
summary(h2reg)
## regression is robust (source), data is close to normal distribution
h2wald <- lme(fixed=DEPTH ~ z_exp, random=~1|ID, data=rg_tab)
summary(h2reg)
anova(h2reg)
h2int <- lmer(DEPTH ~ 1 + z_exp + (1|ID), data=rg_tab)
confint(test)
rm(test)
confint(h2int)
summary(h2reg)
anova(h2reg)
confint(h2int)
## Set libraries ##
library(grid)
library(gridExtra)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
library(lme4)
## regression for every predictor possible (full model)
full_model <- lme(fixed=DEPTH ~ z_exp + z_theta + z_alpha + z_beta + z_rms, random=~1|ID, data=rg_tab)
summary(full_model)
anova(full_model)
h2int <- lmer(DEPTH ~ 1 + z_exp + + z_theta + z_alpha + z_beta + z_rms + (1|ID), data=rg_tab)
confint(h2int)
summary(full_model)
summary(h2int)
full_model2 <- lmer(DEPTH ~ 1 + z_exp + + z_theta + z_alpha + z_beta + z_rms + (1|ID), data=rg_tab)
confint(full_model2)
h2int <- lmer(DEPTH ~ 1 + z_exp + (1|ID), data=rg_tab)
confint(h2int)
summary(h2int)
confint(h2int)
summary(full_model)
anova(full_model)
intervals(full_model)
anova(full_model)
full_model_b <- lme(fixed=DEPTH ~ z_exp + z_theta + z_alpha + z_lbeta + z_hbeta + z_rms, random=~1|ID, data=rg_tab)
summary(full_model_b)
anova(full_model_b)
anova(h2reg)
anova(full_model)
full_model_less <- lme(fixed=DEPTH ~ z_exp + z_theta + z_alpha + z_rms, random=~1|ID, data=rg_tab)
rm(full_model_b)
full_model_less <- lme(fixed=DEPTH ~ z_exp + z_theta + z_alpha + z_rms, random=~1|ID, data=rg_tab)
summary(full_model_less)
anova(full_model_less)
full_model_less <- lme(fixed=DEPTH ~ z_theta + z_alpha + z_rms, random=~1|ID, data=rg_tab)
summary(full_model_less)
anova(full_model_less)
intervals(full_model_less)
summary(full_model)
anova(full_model)
summary(full_model)
anova(full_model)
confint(full_model2)
summary(full_model)
summary(h2reg)
anova(h2reg)
summary(h2reg)
anova(h2reg)
h2int <- lmer(DEPTH ~ 1 + z_exp + (1|ID), data=rg_tab)
## Set libraries ##
library(grid)
library(gridExtra)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
library(lme4)
confint(h2int)
summary(h2int)
summary(h2reg)
summary(full_model)
?lme
coef(h2reg)
summary(h2reg)
install.packages("lmerTest")
library(lmerTest)
confint(h2int)
summary(h2int)
h2int <- lmer(DEPTH ~ 1 + z_exp + (1|ID), data=rg_tab)
anova(h2int)
summary(h2int)
rm(h2wald)
rm(h2int)
h2reg <- lmer(DEPTH ~ 1 + z_exp + (1|ID), data=rg_tab)
summary(h2reg)
anova(h2reg)
confint(h2reg)
h2reg <- lmer(DEPTH ~ 1 + z_exp + (1|ID), data=rg_tab)
summary(h2reg)
anova(h2reg)
summary(h2reg)
rm(full_model)
rm(full_model_less)
rm(full_model2)
full_model <- lmer(DEPTH ~ 1 + z_exp + + z_theta + z_alpha + z_beta + z_rms + (1|ID), data=rg_tab)
summary(full_model_less)
summary(full_model)
anova(full_model)
confint(full_model)
test <- step(full_model)
print(test)
summary(full_model)
summary(full_model)
## t-tests near target vs far target for low-beta and high beta
# low-beta
dif_lbeta <- tt_tab$far_lbeta - tt_tab$near_lbeta
shapiro.test(dif_lbeta)
# high-beta
dif_hbeta <- tt_tab$far_hbeta - tt_tab$near_hbeta
shapiro.test(dif_hbeta)
ttest_lbeta <- t.test(tt_tab$near_lbeta, tt_tab$far_lbeta, paired = T, "greater")
ttest_lbeta #not significant
ttest_hbeta <- t.test(tt_tab$near_hbeta, tt_tab$far_hbeta, paired = T, "greater")
ttest_hbeta # not significant
#boxplot
d_beta_col1 <- data.frame(ttd$near_beta,c(rep('"nah"',30)))
colnames(d_beta_col1) <- c("Betapower", "Bedingung")
d_beta_col2 <- data.frame(ttd$far_beta,c(rep('"fern"',30)))
colnames(d_beta_col2) <- c("Betapower", "Bedingung")
t_d_beta_plot <- rbind(d_beta_col1,d_beta_col2)
ggplot(t_d_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
## Set libraries ##
library(grid)
library(gridExtra)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
library(lme4)
library(lmerTest)
E <- ggdensity(rg_tab, x = "root_mean_square", fill = "lightgray", ylab = "Dichte", xlab = "RMS") +
scale_x_continuous(limits = c(-2, 30)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(A,B,C,D,E,ncol = 2, nrow = 3)
Ez <- ggdensity(rg_tab, x = "z_rms", fill = "lightgray", ylab = "Dichte", xlab = "RMS") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Az,Bz,Cz,Dz,Ez,ncol = 2, nrow = 3)
#boxplot
rms_col1 <- data.frame(tt_tab$near_rms,c(rep('"nah"',30)))
colnames(rms_col1) <- c("RMS", "Bedingung")
rms_col2 <- data.frame(tt_tab$far_rms,c(rep('"fern"',30)))
colnames(rms_col2) <- c("RMS", "Bedingung")
t_rms_plot <- rbind(rms_col1,rms_col2)
ggplot(t_rms_plot, aes(x=Bedingung, y=Quadratisches_Mittel)) +
geom_boxplot() + labs(y = "RMS")
ggplot(t_rms_plot, aes(x=Bedingung, y=RMS)) +
geom_boxplot() + labs(y = "RMS")
## Set libraries ##
library(grid)
library(gridExtra)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
library(lme4)
library(lmerTest)
summary(full_model)
confint(full_model)
print(best_model)
best_model <- step(full_model)
print(best_model)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
par(mfrow=c(2,2))
plot(or_beta_depth_nf$near_beta, ttd$near_beta, xlab = 'Tiefe "nah" (mm)', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
plot(beta_depth_nf$near_beta, tt_tab$near_beta, xlab = 'Tiefe "nah" (mm)', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
plot(or_beta_depth_nf$far_beta, ttd$far_beta, xlab = 'Tiefe "fern" (mm)', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
plot(beta_depth_nf$far_beta, tt_tab$far_beta, xlab = 'Tiefe "fern" (mm)', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
#boxplot
d_beta_col1 <- data.frame(ttd$near_beta,c(rep('"nah"',30)))
colnames(d_beta_col1) <- c("Betapower", "Bedingung")
d_beta_col2 <- data.frame(ttd$far_beta,c(rep('"fern"',30)))
colnames(d_beta_col2) <- c("Betapower", "Bedingung")
t_d_beta_plot <- rbind(d_beta_col1,d_beta_col2)
ggplot(t_d_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
View(tt_fd)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
mean(tt_fd$near_beta)
mean(tt_fd$far_beta)
#boxplot
fd_beta_col1 <- data.frame(tt_fd$near_beta,c(rep('"nah"',30)))
colnames(fd_beta_col1) <- c("Betapower", "Bedingung")
fd_beta_col2 <- data.frame(tt_fd$far_beta,c(rep('"fern"',30)))
colnames(fd_beta_col2) <- c("Betapower", "Bedingung")
t_fd_beta_plot <- rbind(fd_beta_col1,fd_beta_col2)
ggplot(t_fd_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
mean(tt_fd$near_beta)
mean(tt_fd$far_beta)
plot(h2reg)
qqnorm(resid(h2reg))
qqline(resid(h2reg))
plot(h2reg, which = 1)
plot(full_model, which = 1)
qqnorm(resid(full_model))
qqline(resid(full_model))
plot(h2reg, which = 1)
plot(full_model, which = 1)
View(best_model)
plot(best_model, which = 1)
print(best_model)
best_reg <- lmer(DEPTH ~ z_rms + (1|ID), data=rg_tab)
best_reg <- lmer(DEPTH ~ z_rms + (1|ID), data=rg_tab)
plot(best_reg, which = 1)
best_reg <- lmer(DEPTH ~ 1 + z_rms + (1|ID), data=rg_tab)
plot(best_reg, which = 1)
qqnorm(resid(best_reg))
qqline(resid(best_reg))
full_model <- lmer(DEPTH ~ 1 + z_exp + + z_theta + z_alpha + z_beta + z_rms + (1|ID), data=rg_tab)
plot(full_model, which = 1)
qqnorm(resid(full_model))
qqline(resid(full_model))
plot(best_reg, which = 1)
qqnorm(resid(best_reg))
qqline(resid(best_reg))
plot(best_reg, which = 1)
plot(h2reg, which = 1)
qqnorm(resid(h2reg))
qqline(resid(h2reg))
plot(h2reg, which = 1)
plot(h2reg, which = 1, xlab = "Vorhergesagter Wert für die Tiefe", ylab = "Residuen")
plot(h2reg, which = 1, xlab = "Vorhergesagter Wert für die Tiefe", ylab = "Residuen", title = "Darstellung der Residuen")
plot(h2reg, which = 1, xlab = "Vorhergesagter Wert für die Tiefe", ylab = "Residuen", title = "Darstellung der Residuen")
plot(h2reg, which = 1, xlab = "Vorhergesagter Wert für die Tiefe", ylab = "Residuen", main = "Darstellung der Residuen")
plot(full_model, which = 1, xlab = "Vorhergesagter Wert für die Tiefe", ylab = "Residuen", main = "Darstellung der Residuen")
summary(h2reg)
summary(full_model)
plot(h2reg, which = 1, xlab = "Vorhergesagter Wert für die Tiefe", ylab = "Residuen", main = "Darstellung der Residuen")
plot(full_model, which = 1, xlab = "Vorhergesagter Wert für die Tiefe", ylab = "Residuen", main = "Darstellung der Residuen")
install.packages("ggeffects")
## Set libraries ##
library(grid)
library(gridExtra)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
library(lme4)
library(lmerTest)
library(ggeffects)
# Extract the prediction data frame
pred.mm <- ggpredict(h2reg, terms = c("z_exp"))  # this gives overall predictions for the model
(ggplot(pred.mm) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = rg_tab,                      # adding the raw data (scaled values)
aes(x = z_exp, y = DEPTH, colour = ID)) +
labs(x = "Aperiodischer Exponent", y = "Tiefe der Elektrode (in mm)",
title = "Zusammenhang zwischen Aperiodischem Exponenten und Tiefe der Elektrode") +
theme_minimal()
)
# Extract the prediction data frame
pred.full <- ggpredict(h2reg, terms = c("z_exp","z_rms","z_theta","z_beta","z_alpha"))  # this gives overall predictions for the model
print(best_model)
best_reg <- lmer(DEPTH ~ 1 + z_rms + (1|ID), data=rg_tab)
# Extract the prediction data frame
pred.mm <- ggpredict(h2reg, terms = c("z_rms"))  # this gives overall predictions for the model
# Extract the prediction data frame
pred.mm <- ggpredict(best_reg, terms = c("z_rms"))  # this gives overall predictions for the model
(ggplot(pred.mm) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = rg_tab,                      # adding the raw data (scaled values)
aes(x = z_rms, y = DEPTH, colour = ID)) +
labs(x = "RMS", y = "Tiefe der Elektrode (in mm)",
title = "Zusammenhang zwischen RMS und Tiefe der Elektrode") +
theme_minimal())
(ggplot(pred.mm) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = rg_tab,                      # adding the raw data (scaled values)
aes(x = z_exp, y = DEPTH, colour = ID)) +
labs(x = "Aperiodischer Exponent", y = "Tiefe der Elektrode (in mm)",
title = "Zusammenhang zwischen Aperiodischem Exponenten und Tiefe der Elektrode") +
theme_minimal())
# Extract the prediction data frame
pred.mm <- ggpredict(h2reg, terms = c("z_exp"))  # this gives overall predictions for the model
(ggplot(pred.mm) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = rg_tab,                      # adding the raw data (scaled values)
aes(x = z_exp, y = DEPTH, colour = ID)) +
labs(x = "Aperiodischer Exponent", y = "Tiefe der Elektrode (in mm)",
title = "Zusammenhang zwischen Aperiodischem Exponenten und Tiefe der Elektrode") +
theme_minimal())
# Extract the prediction data frame
pred.mm <- ggpredict(best_reg, terms = c("z_rms"))  # this gives overall predictions for the model
(ggplot(pred.mm) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = rg_tab,                      # adding the raw data (scaled values)
aes(x = z_rms, y = DEPTH, colour = ID)) +
labs(x = "RMS", y = "Tiefe der Elektrode (in mm)",
title = "Zusammenhang zwischen RMS und Tiefe der Elektrode") +
theme_minimal())
