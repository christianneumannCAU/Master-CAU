rg_tab$DEPTH[rg_tab$DEPTH < 4]
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
## correlation between beta and depth but for depth < 4
ggscatter(x = rg_tab$DEPTH[rg_tab$DEPTH < 4], y = rg_tab$z_beta[rg_tab$DEPTH < 4], add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "Depth of electrode", ylab = "beta power in STN")
## correlation between beta and depth but for depth < 4
ggscatter(rg_tab, x = "DEPTH[rg_tab$DEPTH < 4]", y = "z_beta[rg_tab$DEPTH < 4]", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "Depth of electrode", ylab = "beta power in STN")
rg_tab$DEPTH[rg_tab$DEPTH < 4]
rg_tab$z_beta[rg_tab$DEPTH < 4]
## correlation between beta and depth but for depth < 4
cor.test(rg_tab$DEPTH[rg_tab$DEPTH < 4],rg_tab$z_beta[rg_tab$DEPTH < 4], "two.sided", "kendall")
## correlation between beta and depth but for depth < 4
cor.test(rg_tab$DEPTH[rg_tab$DEPTH < 4],rg_tab$z_beta[rg_tab$DEPTH < 4], "less", "kendall")
## correlation between beta and depth but for depth < 4
cor(rg_tab$DEPTH[rg_tab$DEPTH < 4],rg_tab$z_beta[rg_tab$DEPTH < 4], "less", "kendall")
cortab
?cor
## correlation between beta and depth but for depth < 4
cor(rg_tab$DEPTH[rg_tab$DEPTH < 4],rg_tab$z_beta[rg_tab$DEPTH < 4], "kendall")
## correlation between beta and depth but for depth < 4
cor(rg_tab$DEPTH[rg_tab$DEPTH < 4],rg_tab$z_beta[rg_tab$DEPTH < 4],method =  "kendall")
View(tt_tab)
# low-beta
dif_lbeta <- tt_tab$far_lbeta - tt_tab$near_lbeta
shapiro.test(dif_lbeta)
ttest_lbeta <- t.test(tt_tab$near_lbeta, tt_tab$far_lbeta, paired = T, "greater")
ttest_lbeta
# high-beta
dif_hbeta <- tt_tab$far_hbeta - tt_tab$near_hbeta
shapiro.test(dif_hbeta)
ttest_hbeta <- t.test(tt_tab$near_hbeta, tt_tab$far_hbeta, paired = T, "greater")
ttest_hbeta
dif_lbeta
mean(dif_lbeta)
mean(dif_hbeta)
ttest_lbeta
ttest_hbeta
# correlation between depth and low-beta/ hight-beta
# low beta
cor(rg_tab$DEPTH, rg_tab$z_lbeta, rg_tab$z_hbeta, method = "kendall")
# correlation between depth and low-beta/ hight-beta
# low beta
cor_b <- data.frame(rg_tab$DEPTH, rg_tab$z_lbeta, rg_tab$z_hbeta)
cor(cor_b, method = "kendall")
# same for depth < 4
cor_b4 <- data.frame(rg_tab$DEPTH[rg_tab$DEPTH < 4], rg_tab$z_lbeta[rg_tab$DEPTH < 4], rg_tab$z_hbeta[rg_tab$DEPTH < 4])
cor(cor_b, method = "kendall")
rg_tab$DEPTH[rg_tab$DEPTH < 4]
rg_tab$DEPTH
cor(rg_tab$DEPTH, rg_tab$z_lbeta, method = "kendall")
cor(rg_tab$DEPTH[rg_tab$DEPTH < 4], rg_tab$z_lbeta[rg_tab$DEPTH < 4], method = "kendall")
# high-beta
cor(rg_tab$DEPTH[rg_tab$DEPTH < 4], rg_tab$z_hbeta[rg_tab$DEPTH < 4], method = "kendall")
## correlation between depth and low-beta/ hight-beta
cor(rg_tab$DEPTH, rg_tab$z_lbeta, method = "kendall")
# high-beta
cor(rg_tab$DEPTH, rg_tab$z_hbeta, method = "kendall")
cor.test(rg_tab$DEPTH[rg_tab$DEPTH < 4], rg_tab$z_lbeta[rg_tab$DEPTH < 4],  "less" ,"kendall")
ttest_lbeta #not significant
ttest_hbeta # not significant
## correlation between depth and low-beta/ hight-beta
# low-beta
cor(rg_tab$DEPTH, rg_tab$z_lbeta, method = "kendall")
# high-beta
cor(rg_tab$DEPTH, rg_tab$z_hbeta, method = "kendall")
## correlation between depth and low-beta/ hight-beta
# low-beta
cor(rg_tab$DEPTH, rg_tab$z_lbeta, method = "kendall")
## same for depth < 4
# low-beta
cor(rg_tab$DEPTH[rg_tab$DEPTH < 4], rg_tab$z_lbeta[rg_tab$DEPTH < 4], method = "kendall")
cor.test(rg_tab$DEPTH[rg_tab$DEPTH < 4], rg_tab$z_lbeta[rg_tab$DEPTH < 4],  "less" ,"kendall")
# high-beta
cor(rg_tab$DEPTH[rg_tab$DEPTH < 4], rg_tab$z_hbeta[rg_tab$DEPTH < 4], method = "kendall")
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
rgd <- read.csv("../02_data/04_final/regression_table_discussion.csv")
ttd <- read.csv("../02_data/04_final/ttest_table_discussion.csv")
## compare beta near target with far from target again but with original powerspectrum
# check normal distribution of difference for paired t-test
dif_beta_d <- ttd$far_beta - ttd$near_beta
shapiro.test(dif_beta_d)
# we can assume normal distribution
ttest_beta_d <- t.test(ttd$near_beta, ttd$far_beta, paired = T, "greater")
ttest_beta_d
View(tt_tab)
plot(tt_tab$near_beta)
plot(ttd$near_beta)
beta_id <- read.csv("../02_data/04_final/beta_ID.csv")
or_beta_id <- read.csv("../02_data/04_final/or_beta_ID.csv")
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_id$near_beta_ID, ttd$near_beta)
View(or_beta_id)
beta_id <- read.csv("../02_data/04_final/beta_ID.csv")
or_beta_id <- read.csv("../02_data/04_final/or_beta_ID.csv")
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_id$near_beta_ID, ttd$near_beta)
plot(beta_id$near_beta_ID, tt_tab$near_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_id$near_beta_ID, ttd$near_beta)
plot(beta_id$near_beta_ID, tt_tab$near_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_id$near_beta_ID, ttd$near_beta)
plot(beta_id$near_beta_ID, tt_tab$near_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_id$near_beta_ID, ttd$near_beta)
plot(or_beta_id$far_beta_ID, ttd$far_beta)
plot(beta_id$far_beta_ID, tt_tab$far_beta)
plot(or_beta_id$far_beta_ID, ttd$far_beta)
plot(beta_id$far_beta_ID, tt_tab$far_beta)
mean(ttd$near_beta)
mean(tt_tab$near_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_id$near_beta_ID, ttd$near_beta)
plot(beta_id$near_beta_ID, tt_tab$near_beta)
mean(or_beta_id$far_beta_ID, ttd$far_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
rg_fd <- read.csv("../02_data/04_final/regression_table_fd.csv")
tt_fd <- read.csv("../02_data/04_final/ttest_table_fd.csv")
View(tt_fd)
## t-tests near target vs far target for beta without aperiodic component, but without cleaning of data
dif_fbeta <- tt_fd$far_beta - tt_fd$near_beta
shapiro.test(dif_fbeta)
ttest_fbeta <- t.test(tt_fd$near_beta, tt_fd$far_beta, paired = T, "greater")
ttest_fbeta
mean(tt_fd$near_beta)
mean(tt_fd$far_beta)
View(or_beta_id)
rg_fd <- read.csv("../02_data/04_final/regression_table_fd.csv")
tt_fd <- read.csv("../02_data/04_final/ttest_table_fd.csv")
## t-tests near target vs far target for beta without aperiodic component, but without cleaning of data
dif_fbeta <- tt_fd$far_beta - tt_fd$near_beta
shapiro.test(dif_fbeta)
ttest_fbeta <- t.test(tt_fd$near_beta, tt_fd$far_beta, paired = T, "greater")
ttest_fbeta
fbeta_id <- read.csv("../02_data/04_final/beta_ID_fd.csv")
View(fbeta_id)
fbeta_id == or_beta_id
mean(tt_fd$near_beta)
mean(tt_fd$far_beta)
View(ttd)
View(or_beta_id)
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
fbeta_id <- read.csv("../02_data/04_final/beta_ID_fd.csv")
View(fbeta_id)
fbeta_id <- read.csv("../02_data/04_final/beta_ID_fd.csv")
View(or_beta_id)
or_beta_id <- read.csv("../02_data/04_final/or_beta_ID.csv")
View(or_beta_id)
View(beta_id)
View(fbeta_id)
View(or_beta_id)
beta_id <- read.csv("../02_data/04_final/beta_depth_nf.csv")
View(beta_id)
beta_id <- read.csv("../02_data/04_final/beta_depth_nf.csv")
View(beta_id)
or_beta_depth_nf <- read.csv("../02_data/04_final/or_beta_depth_nf.csv")
rm(or_beta_id)
rm(beta_id)
beta_depth_nf <- read.csv("../02_data/04_final/beta_depth_nf.csv")
View(or_beta_depth_nf)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta_ID, ttd$near_beta)
View(or_beta_depth_nf)
View(or_beta_depth_nf)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
plot(or_beta_depth_nf$far_beta, ttd$far_beta)
plot(beta_depth_nf$far_beta, tt_tab$far_beta)
View(beta_depth_nf)
View(or_beta_depth_nf)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(or_beta_depth_nf$far_beta, ttd$far_beta)
plot(beta_depth_nf$far_beta, tt_tab$far_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
plot(or_beta_depth_nf$far_beta, ttd$far_beta)
plot(beta_depth_nf$far_beta, tt_tab$far_beta)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
## t-tests near target vs far target for beta without aperiodic component, but without cleaning of data
dif_fbeta <- tt_fd$far_beta - tt_fd$near_beta
shapiro.test(dif_fbeta)
ttest_fbeta <- t.test(tt_fd$near_beta, tt_fd$far_beta, paired = T, "greater")
ttest_fbeta
mean(tt_fd$near_beta)
mean(tt_fd$far_beta)
dif_theta <- tt_tab$far_theta - tt_tab$near_theta
dif_alpha <- tt_tab$far_alpha - tt_tab$near_alpha
shapiro.test(dif_theta)
shapiro.test(dif_alpha)
# we can assume normal distribution
ttest_theta <- t.test(tt_tab$near_theta, tt_tab$far_theta, paired = T, "greater")
ttest_theta
# we can assume normal distribution
ttest_theta <- t.test(tt_tab$near_theta, tt_tab$far_theta, paired = T, "less")
ttest_theta
# we can assume normal distribution
ttest_theta <- t.test(tt_tab$near_theta, tt_tab$far_theta, paired = T, "greater")
ttest_theta
ttest_alpha <- t.test(tt_tab$near_alpha, tt_tab$far_alpha, paired = T, "less")
ttest_alpha
ttest_theta
ttest_alpha
# AP_EXPONENT
hist(rg_tab$AP_EXPONENT)
qqnorm(rg_tab$AP_EXPONENT)
qqline(rg_tab$AP_EXPONENT)
ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
# AP_EXPONENT
hist(rg_tab$AP_EXPONENT)
qqnorm(rg_tab$AP_EXPONENT)
qqline(rg_tab$AP_EXPONENT)
ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
#density plots for all 5
par(mfrow=c(2,2,1))
#density plots for all 5
par(mfrow=c(2,3))
ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggdensity(rg_tab, x = "root_mean_square", fill = "lightgray", title = "root_mean_square") +
scale_x_continuous(limits = c(-2, 30)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
install.packages(grid)
install.packages('grid')
## Set libraries ##
library(grid)
library(gridExtra)
library(cowplot)
install.packages('ggpubr')
library(ggpubr)
#density plots for all 5
A <- ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
B <- ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
C <- ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
D <- ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
E <- ggdensity(rg_tab, x = "root_mean_square", fill = "lightgray", title = "root_mean_square") +
scale_x_continuous(limits = c(-2, 30)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(A,B,C,ncol = 2, nrow = 3)
ggarrange(A,B,C,D,E,ncol = 2, nrow = 3)
# density plots for z-transformed variables
Az <- ggdensity(rg_tab, x = "z_exp", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Bz <- ggdensity(rg_tab, x = "z_theta", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Cz <- ggdensity(rg_tab, x = "z_alpha", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Dz <- ggdensity(rg_tab, x = "z_beta", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Ez <- ggdensity(rg_tab, x = "z_rms", fill = "lightgray", title = "root mean square") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Az,Bz,Cz,Dz,Ez,ncol = 2, nrow = 3)
# THETA_POWER
Bl <- ggdensity(rg_tab, x = "l_theta", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
Cl <- ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
Dl <- ggdensity(rg_tab, x = "l_beta", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Az,Bz,Cz,Dz,Ez,ncol = 2, nrow = 2)
ggarrange(Bl,Cl,Dl,ncol = 2, nrow = 2)
## Set libraries ##
library(grid)
library(gridExtra)
library(ggpubr)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
ggarrange(Az,Bz,Cz,Dz,Ez,ncol = 2, nrow = 3)
# density plots for z-transformed variables
Az <- ggdensity(rg_tab, x = "z_exp", fill = "lightgray", ylab = "Dichte", xlab = "aperoidischer Exponent") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Bz <- ggdensity(rg_tab, x = "z_theta", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Cz <- ggdensity(rg_tab, x = "z_alpha", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Dz <- ggdensity(rg_tab, x = "z_beta", fill = "lightgray", ylab = "Dichte", xlab = "Betapower") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Ez <- ggdensity(rg_tab, x = "z_rms", fill = "lightgray", ylab = "Dichte", xlab = "Quadratisches Mittel") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Az,Bz,Cz,Dz,Ez,ncol = 2, nrow = 3)
#density plots for all 5
A <- ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", ylab = "Dichte", xlab = "aperoidischer Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
B <- ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
C <- ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
D <- ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Betapower") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
E <- ggdensity(rg_tab, x = "root_mean_square", fill = "lightgray", ylab = "Dichte", xlab = "Quadratisches Mittel") +
scale_x_continuous(limits = c(-2, 30)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(A,B,C,D,E,ncol = 2, nrow = 3)
D <- ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Betapower") +
scale_x_continuous(limits = c(-1, 1)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(A,B,C,D,E,ncol = 2, nrow = 3)
D <- ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Betapower") +
scale_x_continuous(limits = c(-0.5, 1)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(A,B,C,D,E,ncol = 2, nrow = 3)
B <- ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower") +
scale_x_continuous(limits = c(-0.5, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
C <- ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower") +
scale_x_continuous(limits = c(-1, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(A,B,C,D,E,ncol = 2, nrow = 3)
ggarrange(Az,Bz,Cz,Dz,Ez,ncol = 2, nrow = 3)
# THETA_POWER
Bl <- ggdensity(rg_tab, x = "l_theta", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
Cl <- ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
Dl <- ggdensity(rg_tab, x = "l_beta", fill = "lightgray", ylab = "Dichte", xlab = "Betapower") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Bl,Cl,Dl,ncol = 2, nrow = 2)
# THETA_POWER
Bl <- ggdensity(rg_tab, x = "l_theta", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower") +
scale_x_continuous(limits = c(-5, 2.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
Cl <- ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower") +
scale_x_continuous(limits = c(-5, 2.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
Dl <- ggdensity(rg_tab, x = "l_beta", fill = "lightgray", ylab = "Dichte", xlab = "Betapower") +
scale_x_continuous(limits = c(-5, 2.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Bl,Cl,Dl,ncol = 2, nrow = 2)
# THETA_POWER
Bl <- ggdensity(rg_tab, x = "l_theta", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
Cl <- ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
Dl <- ggdensity(rg_tab, x = "l_beta", fill = "lightgray", ylab = "Dichte", xlab = "Betapower") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Bl,Cl,Dl,ncol = 2, nrow = 2)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
plot(or_beta_depth_nf$far_beta, ttd$far_beta)
plot(beta_depth_nf$far_beta, tt_tab$far_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
par(mfrow=c(2,2))
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
plot(or_beta_depth_nf$far_beta, ttd$far_beta)
plot(beta_depth_nf$far_beta, tt_tab$far_beta)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta, xlab = "Tiefe "nah"", ylab = "Betapower (µV)")
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta, xlab = 'Tiefe "nah"', ylab = "Betapower (µV)", main = 'original Powerspektrum')
mean(tt_tab$near_beta, xlab = 'Tiefe "nah"', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
par(mfrow=c(2,2))
plot(or_beta_depth_nf$near_beta, ttd$near_beta, xlab = 'Tiefe "nah"', ylab = "Betapower (µV)", main = 'original Powerspektrum')
plot(beta_depth_nf$near_beta, tt_tab$near_beta, xlab = 'Tiefe "nah"', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
plot(or_beta_depth_nf$far_beta, ttd$far_beta, xlab = 'Tiefe "fern"', ylab = "Betapower (µV)", main = 'original Powerspektrum')
plot(beta_depth_nf$far_beta, tt_tab$far_beta, xlab = 'Tiefe "fern"', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
par(mfrow=c(2,2))
plot(or_beta_depth_nf$near_beta, ttd$near_beta, xlab = 'Tiefe "nah"', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
plot(beta_depth_nf$near_beta, tt_tab$near_beta, xlab = 'Tiefe "nah"', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
plot(or_beta_depth_nf$far_beta, ttd$far_beta, xlab = 'Tiefe "fern"', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
plot(beta_depth_nf$far_beta, tt_tab$far_beta, xlab = 'Tiefe "fern"', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
Bz <- ggdensity(rg_tab, x = "z_theta", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower (µV)") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Cz <- ggdensity(rg_tab, x = "z_alpha", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower (µV)") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Dz <- ggdensity(rg_tab, x = "z_beta", fill = "lightgray", ylab = "Dichte", xlab = "Betapower (µV)") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Az,Bz,Cz,Dz,Ez,ncol = 2, nrow = 3)
B <- ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower (µV)") +
scale_x_continuous(limits = c(-0.5, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
C <- ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower (µV)") +
scale_x_continuous(limits = c(-1, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
D <- ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Betapower (µV)") +
scale_x_continuous(limits = c(-0.5, 1)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(A,B,C,D,E,ncol = 2, nrow = 3)
# THETA_POWER
Bl <- ggdensity(rg_tab, x = "l_theta", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower (µV)") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
Cl <- ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower (µV)") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
Dl <- ggdensity(rg_tab, x = "l_beta", fill = "lightgray", ylab = "Dichte", xlab = "Betapower (µV)") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Bl,Cl,Dl,ncol = 2, nrow = 2)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
par(mfrow=c(2,2))
plot(or_beta_depth_nf$near_beta, ttd$near_beta, xlab = 'Tiefe "nah" (mm)', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
plot(beta_depth_nf$near_beta, tt_tab$near_beta, xlab = 'Tiefe "nah" (mm)', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
plot(or_beta_depth_nf$far_beta, ttd$far_beta, xlab = 'Tiefe "fern" (mm)', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
plot(beta_depth_nf$far_beta, tt_tab$far_beta, xlab = 'Tiefe "fern" (mm)', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
