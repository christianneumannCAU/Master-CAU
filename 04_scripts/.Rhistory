library(moments)
library(nlme)
## read data ##
rg_tab <- read.csv("../02_data/04_final/regression_table.csv")
tt_tab <- read.csv("../02_data/04_final/ttest_table.csv")
## read data ##
rg_tab <- read.csv("../02_data/04_final/regression_table.csv")
tt_tab <- read.csv("../02_data/04_final/ttest_table.csv")
## Add new variable for distance to target (got determined by MRT beforehand - the Depth 0 is the target)##
rg_tab$distance <- abs(rg_tab$DEPTH)
## Assign data types ##
rg_tab$ID <- as.factor(rg_tab$ID)
rg_tab$SIDE <- as.factor(rg_tab$SIDE)
rg_tab$CHANNEL <- as.factor(rg_tab$CHANNEL)
## Add new variable for distance to target (got determined by MRT beforehand - the Depth 0 is the target)##
rg_tab$distance <- abs(rg_tab$DEPTH)
## Assign data types ##
rg_tab$ID <- as.factor(rg_tab$ID)
rg_tab$SIDE <- as.factor(rg_tab$SIDE)
rg_tab$CHANNEL <- as.factor(rg_tab$CHANNEL)
## Test for normal distribution is bad: gets significant automatically with big samplesize ##
shapiro.test(rg_tab$AP_EXPONENT)
# AP_EXPONENT
hist(rg_tab$AP_EXPONENT)
qqnorm(rg_tab$AP_EXPONENT)
qqline(rg_tab$AP_EXPONENT)
ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# THETA_POWER
hist(rg_tab$THETA_POWER)
qqnorm(rg_tab$THETA_POWER)
qqline(rg_tab$THETA_POWER)
ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
hist(rg_tab$ALPHA_POWER)
qqnorm(rg_tab$ALPHA_POWER)
qqline(rg_tab$ALPHA_POWER)
ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
hist(rg_tab$BETA_POWER)
qqnorm(rg_tab$BETA_POWER)
qqline(rg_tab$BETA_POWER)
ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# root mean square
hist(rg_tab$root_mean_square)
qqnorm(rg_tab$root_mean_square)
qqline(rg_tab$root_mean_square)
ggdensity(rg_tab, x = "root_mean_square", fill = "lightgray", title = "root_mean_square") +
scale_x_continuous(limits = c(-2, 30)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# AP_EXPONENT
hist(rg_tab$z_exp)
qqnorm(rg_tab$z_exp)
qqline(rg_tab$z_exp)
ggdensity(rg_tab, x = "z_exp", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# THETA_POWER
hist(rg_tab$z_theta)
qqnorm(rg_tab$z_theta)
qqline(rg_tab$z_theta)
ggdensity(rg_tab, x = "z_theta", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
hist(rg_tab$z_alpha)
qqnorm(rg_tab$z_alpha)
qqline(rg_tab$z_alpha)
ggdensity(rg_tab, x = "z_alpha", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
hist(rg_tab$z_beta)
qqnorm(rg_tab$z_beta)
qqline(rg_tab$z_beta)
ggdensity(rg_tab, x = "z_beta", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# root mean square
hist(rg_tab$z_rms)
qqnorm(rg_tab$z_rms)
qqline(rg_tab$z_rms)
ggdensity(rg_tab, x = "z_rms", fill = "lightgray", title = "root mean square") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
## try log-transformation ##
rg_tab$l_theta <- log10(rg_tab$THETA_POWER)
rg_tab$l_alpha <- log10(rg_tab$ALPHA_POWER)
rg_tab$l_beta <- log10(rg_tab$BETA_POWER)
# THETA_POWER
ggdensity(rg_tab, x = "l_theta", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
ggdensity(rg_tab, x = "l_beta", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# what if we distinct between low and high beta?
ggdensity(rg_tab, x = "z_lbeta", fill = "lightgray", title = "Low_Beta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggdensity(rg_tab, x = "z_hbeta", fill = "lightgray", title = "High_Beta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
View(tt_tab)
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
## read data ##
rg_tab <- read.csv("../02_data/04_final/regression_table.csv")
tt_tab <- read.csv("../02_data/04_final/ttest_table.csv")
## Add new variable for distance to target (got determined by MRT beforehand - the Depth 0 is the target)##
rg_tab$distance <- abs(rg_tab$DEPTH)
## Assign data types ##
rg_tab$ID <- as.factor(rg_tab$ID)
rg_tab$SIDE <- as.factor(rg_tab$SIDE)
rg_tab$CHANNEL <- as.factor(rg_tab$CHANNEL)
## Test for normal distribution is bad: gets significant automatically with big samplesize ##
shapiro.test(rg_tab$AP_EXPONENT)
# AP_EXPONENT
hist(rg_tab$AP_EXPONENT)
qqnorm(rg_tab$AP_EXPONENT)
qqline(rg_tab$AP_EXPONENT)
ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# THETA_POWER
hist(rg_tab$THETA_POWER)
qqnorm(rg_tab$THETA_POWER)
qqline(rg_tab$THETA_POWER)
ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
hist(rg_tab$ALPHA_POWER)
qqnorm(rg_tab$ALPHA_POWER)
qqline(rg_tab$ALPHA_POWER)
ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
hist(rg_tab$BETA_POWER)
qqnorm(rg_tab$BETA_POWER)
qqline(rg_tab$BETA_POWER)
ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# root mean square
hist(rg_tab$root_mean_square)
qqnorm(rg_tab$root_mean_square)
qqline(rg_tab$root_mean_square)
ggdensity(rg_tab, x = "root_mean_square", fill = "lightgray", title = "root_mean_square") +
scale_x_continuous(limits = c(-2, 30)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# AP_EXPONENT
hist(rg_tab$z_exp)
qqnorm(rg_tab$z_exp)
qqline(rg_tab$z_exp)
ggdensity(rg_tab, x = "z_exp", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# THETA_POWER
hist(rg_tab$z_theta)
qqnorm(rg_tab$z_theta)
qqline(rg_tab$z_theta)
ggdensity(rg_tab, x = "z_theta", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
hist(rg_tab$z_alpha)
qqnorm(rg_tab$z_alpha)
qqline(rg_tab$z_alpha)
ggdensity(rg_tab, x = "z_alpha", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
hist(rg_tab$z_beta)
qqnorm(rg_tab$z_beta)
qqline(rg_tab$z_beta)
ggdensity(rg_tab, x = "z_beta", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# root mean square
hist(rg_tab$z_rms)
qqnorm(rg_tab$z_rms)
qqline(rg_tab$z_rms)
ggdensity(rg_tab, x = "z_rms", fill = "lightgray", title = "root mean square") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
## try log-transformation ##
rg_tab$l_theta <- log10(rg_tab$THETA_POWER)
rg_tab$l_alpha <- log10(rg_tab$ALPHA_POWER)
rg_tab$l_beta <- log10(rg_tab$BETA_POWER)
# THETA_POWER
ggdensity(rg_tab, x = "l_theta", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
ggdensity(rg_tab, x = "l_beta", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# check normal distribution of difference for paired t-test
dif_beta <- tt_tab$far_beta - tt_tab$near_beta
dif_rms <- tt_tab$far_rms - tt_tab$near_rms
shapiro.test(dif_beta)
# we can assume normal distribution
ttest_beta <- t.test(tt_tab$near_beta, tt_tab$far_beta, paired = T, "greater")
ttest_beta
shapiro.test(dif_rms)
ttest_rms <- t.test(tt_tab$near_rms, tt_tab$far_rms, paired = T, "greater")
ttest_rms
# check normal distribution of difference for paired t-test
dif_exp <- tt_tab$far_exp - tt_tab$near_exp
shapiro.test(dif_exp)
# we can assume normal distribution
ttest_exp <- t.test(tt_tab$near_exp, tt_tab$far_exp, paired = T, "two.sided")
ttest_exp
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
# is depth normal distributed?
ggdensity(rg_tab, x = "DEPTH", fill = "lightgray", title = "Depth of electrode") +
scale_x_continuous(limits = c(-20, 20)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# scatter plot
ggscatter(rg_tab, x = "DEPTH", y = "z_exp", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "Depth of electrode", ylab = "aperiodic exponent")
# correlation test
r <- cor.test(rg_tab$DEPTH,rg_tab$z_exp, "two.sided", "kendall")
r
# correlation test
r <- cor.test(rg_tab$DEPTH,rg_tab$z_exp, "two.sided", "spearman")
# kendall correlation which is non-parametric (spearman has issues with ties)
short <- data.frame(rg_tab$distance, rg_tab$DEPTH, rg_tab$z_exp, rg_tab$z_theta, rg_tab$z_alpha, rg_tab$z_beta, rg_tab$z_rms)
cortab <- cor(short, method = "kendall")
cortab
ggscatter(rg_tab, x = "DEPTH", y = "z_rms", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "Depth of electrode", ylab = "root mean square")
ggscatter(rg_tab, x = "DEPTH", y = "z_theta", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "Depth of electrode", ylab = "theta power")
ggscatter(rg_tab, x = "DEPTH", y = "z_alpha", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "Depth of electrode", ylab = "alpha power")
# regression is robust (source), data is close to normal distribution
full_model_depth <- lme(fixed=DEPTH ~ z_exp + z_rms + z_alpha + z_theta, random=~1|ID, data=rg_tab)
summary(full_model_depth)
# regression is robust (source), data is close to normal distribution
full_model_depth <- lme(fixed=distance ~ z_exp + z_rms + z_alpha + z_theta, random=~1|ID, data=rg_tab)
summary(full_model_depth)
anova(full_model_depth)
# regression is robust (source), data is close to normal distribution
full_model_depth <- lme(fixed=DEPTH ~ z_exp + z_rms + z_alpha + z_theta, random=~1|ID, data=rg_tab)
summary(full_model_depth)
anova(full_model_depth)
ggscatter(rg_tab, x = "DEPTH", y = "z_rms", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "Depth of electrode", ylab = "root mean square")
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
ggscatter(rg_tab, x = "DEPTH", y = "z_rms", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "Depth of electrode", ylab = "root mean square")
View(rg_tab)
rg_tab$DEPTH[rg_tab$DEPTH < 4]
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
## correlation between beta and depth but for depth < 4
ggscatter(x = rg_tab$DEPTH[rg_tab$DEPTH < 4], y = rg_tab$z_beta[rg_tab$DEPTH < 4], add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "Depth of electrode", ylab = "beta power in STN")
## correlation between beta and depth but for depth < 4
ggscatter(rg_tab, x = "DEPTH[rg_tab$DEPTH < 4]", y = "z_beta[rg_tab$DEPTH < 4]", add = "reg.line",
conf.int = T, cor.coef = T, cor.method = "kendall", xlab = "Depth of electrode", ylab = "beta power in STN")
rg_tab$DEPTH[rg_tab$DEPTH < 4]
rg_tab$z_beta[rg_tab$DEPTH < 4]
## correlation between beta and depth but for depth < 4
cor.test(rg_tab$DEPTH[rg_tab$DEPTH < 4],rg_tab$z_beta[rg_tab$DEPTH < 4], "two.sided", "kendall")
## correlation between beta and depth but for depth < 4
cor.test(rg_tab$DEPTH[rg_tab$DEPTH < 4],rg_tab$z_beta[rg_tab$DEPTH < 4], "less", "kendall")
## correlation between beta and depth but for depth < 4
cor(rg_tab$DEPTH[rg_tab$DEPTH < 4],rg_tab$z_beta[rg_tab$DEPTH < 4], "less", "kendall")
cortab
?cor
## correlation between beta and depth but for depth < 4
cor(rg_tab$DEPTH[rg_tab$DEPTH < 4],rg_tab$z_beta[rg_tab$DEPTH < 4], "kendall")
## correlation between beta and depth but for depth < 4
cor(rg_tab$DEPTH[rg_tab$DEPTH < 4],rg_tab$z_beta[rg_tab$DEPTH < 4],method =  "kendall")
View(tt_tab)
# low-beta
dif_lbeta <- tt_tab$far_lbeta - tt_tab$near_lbeta
shapiro.test(dif_lbeta)
ttest_lbeta <- t.test(tt_tab$near_lbeta, tt_tab$far_lbeta, paired = T, "greater")
ttest_lbeta
# high-beta
dif_hbeta <- tt_tab$far_hbeta - tt_tab$near_hbeta
shapiro.test(dif_hbeta)
ttest_hbeta <- t.test(tt_tab$near_hbeta, tt_tab$far_hbeta, paired = T, "greater")
ttest_hbeta
dif_lbeta
mean(dif_lbeta)
mean(dif_hbeta)
ttest_lbeta
ttest_hbeta
# correlation between depth and low-beta/ hight-beta
# low beta
cor(rg_tab$DEPTH, rg_tab$z_lbeta, rg_tab$z_hbeta, method = "kendall")
# correlation between depth and low-beta/ hight-beta
# low beta
cor_b <- data.frame(rg_tab$DEPTH, rg_tab$z_lbeta, rg_tab$z_hbeta)
cor(cor_b, method = "kendall")
# same for depth < 4
cor_b4 <- data.frame(rg_tab$DEPTH[rg_tab$DEPTH < 4], rg_tab$z_lbeta[rg_tab$DEPTH < 4], rg_tab$z_hbeta[rg_tab$DEPTH < 4])
cor(cor_b, method = "kendall")
rg_tab$DEPTH[rg_tab$DEPTH < 4]
rg_tab$DEPTH
cor(rg_tab$DEPTH, rg_tab$z_lbeta, method = "kendall")
cor(rg_tab$DEPTH[rg_tab$DEPTH < 4], rg_tab$z_lbeta[rg_tab$DEPTH < 4], method = "kendall")
# high-beta
cor(rg_tab$DEPTH[rg_tab$DEPTH < 4], rg_tab$z_hbeta[rg_tab$DEPTH < 4], method = "kendall")
## correlation between depth and low-beta/ hight-beta
cor(rg_tab$DEPTH, rg_tab$z_lbeta, method = "kendall")
# high-beta
cor(rg_tab$DEPTH, rg_tab$z_hbeta, method = "kendall")
cor.test(rg_tab$DEPTH[rg_tab$DEPTH < 4], rg_tab$z_lbeta[rg_tab$DEPTH < 4],  "less" ,"kendall")
ttest_lbeta #not significant
ttest_hbeta # not significant
## correlation between depth and low-beta/ hight-beta
# low-beta
cor(rg_tab$DEPTH, rg_tab$z_lbeta, method = "kendall")
# high-beta
cor(rg_tab$DEPTH, rg_tab$z_hbeta, method = "kendall")
## correlation between depth and low-beta/ hight-beta
# low-beta
cor(rg_tab$DEPTH, rg_tab$z_lbeta, method = "kendall")
## same for depth < 4
# low-beta
cor(rg_tab$DEPTH[rg_tab$DEPTH < 4], rg_tab$z_lbeta[rg_tab$DEPTH < 4], method = "kendall")
cor.test(rg_tab$DEPTH[rg_tab$DEPTH < 4], rg_tab$z_lbeta[rg_tab$DEPTH < 4],  "less" ,"kendall")
# high-beta
cor(rg_tab$DEPTH[rg_tab$DEPTH < 4], rg_tab$z_hbeta[rg_tab$DEPTH < 4], method = "kendall")
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
rgd <- read.csv("../02_data/04_final/regression_table_discussion.csv")
ttd <- read.csv("../02_data/04_final/ttest_table_discussion.csv")
## compare beta near target with far from target again but with original powerspectrum
# check normal distribution of difference for paired t-test
dif_beta_d <- ttd$far_beta - ttd$near_beta
shapiro.test(dif_beta_d)
# we can assume normal distribution
ttest_beta_d <- t.test(ttd$near_beta, ttd$far_beta, paired = T, "greater")
ttest_beta_d
View(tt_tab)
plot(tt_tab$near_beta)
plot(ttd$near_beta)
beta_id <- read.csv("../02_data/04_final/beta_ID.csv")
or_beta_id <- read.csv("../02_data/04_final/or_beta_ID.csv")
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_id$near_beta_ID, ttd$near_beta)
View(or_beta_id)
beta_id <- read.csv("../02_data/04_final/beta_ID.csv")
or_beta_id <- read.csv("../02_data/04_final/or_beta_ID.csv")
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_id$near_beta_ID, ttd$near_beta)
plot(beta_id$near_beta_ID, tt_tab$near_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_id$near_beta_ID, ttd$near_beta)
plot(beta_id$near_beta_ID, tt_tab$near_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_id$near_beta_ID, ttd$near_beta)
plot(beta_id$near_beta_ID, tt_tab$near_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_id$near_beta_ID, ttd$near_beta)
plot(or_beta_id$far_beta_ID, ttd$far_beta)
plot(beta_id$far_beta_ID, tt_tab$far_beta)
plot(or_beta_id$far_beta_ID, ttd$far_beta)
plot(beta_id$far_beta_ID, tt_tab$far_beta)
mean(ttd$near_beta)
mean(tt_tab$near_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_id$near_beta_ID, ttd$near_beta)
plot(beta_id$near_beta_ID, tt_tab$near_beta)
mean(or_beta_id$far_beta_ID, ttd$far_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
rg_fd <- read.csv("../02_data/04_final/regression_table_fd.csv")
tt_fd <- read.csv("../02_data/04_final/ttest_table_fd.csv")
View(tt_fd)
## t-tests near target vs far target for beta without aperiodic component, but without cleaning of data
dif_fbeta <- tt_fd$far_beta - tt_fd$near_beta
shapiro.test(dif_fbeta)
ttest_fbeta <- t.test(tt_fd$near_beta, tt_fd$far_beta, paired = T, "greater")
ttest_fbeta
mean(tt_fd$near_beta)
mean(tt_fd$far_beta)
View(or_beta_id)
rg_fd <- read.csv("../02_data/04_final/regression_table_fd.csv")
tt_fd <- read.csv("../02_data/04_final/ttest_table_fd.csv")
## t-tests near target vs far target for beta without aperiodic component, but without cleaning of data
dif_fbeta <- tt_fd$far_beta - tt_fd$near_beta
shapiro.test(dif_fbeta)
ttest_fbeta <- t.test(tt_fd$near_beta, tt_fd$far_beta, paired = T, "greater")
ttest_fbeta
fbeta_id <- read.csv("../02_data/04_final/beta_ID_fd.csv")
View(fbeta_id)
fbeta_id == or_beta_id
mean(tt_fd$near_beta)
mean(tt_fd$far_beta)
View(ttd)
View(or_beta_id)
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
fbeta_id <- read.csv("../02_data/04_final/beta_ID_fd.csv")
View(fbeta_id)
fbeta_id <- read.csv("../02_data/04_final/beta_ID_fd.csv")
View(or_beta_id)
or_beta_id <- read.csv("../02_data/04_final/or_beta_ID.csv")
View(or_beta_id)
View(beta_id)
View(fbeta_id)
View(or_beta_id)
beta_id <- read.csv("../02_data/04_final/beta_depth_nf.csv")
View(beta_id)
beta_id <- read.csv("../02_data/04_final/beta_depth_nf.csv")
View(beta_id)
or_beta_depth_nf <- read.csv("../02_data/04_final/or_beta_depth_nf.csv")
rm(or_beta_id)
rm(beta_id)
beta_depth_nf <- read.csv("../02_data/04_final/beta_depth_nf.csv")
View(or_beta_depth_nf)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta_ID, ttd$near_beta)
View(or_beta_depth_nf)
View(or_beta_depth_nf)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
plot(or_beta_depth_nf$far_beta, ttd$far_beta)
plot(beta_depth_nf$far_beta, tt_tab$far_beta)
View(beta_depth_nf)
View(or_beta_depth_nf)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(or_beta_depth_nf$far_beta, ttd$far_beta)
plot(beta_depth_nf$far_beta, tt_tab$far_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
plot(or_beta_depth_nf$far_beta, ttd$far_beta)
plot(beta_depth_nf$far_beta, tt_tab$far_beta)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
## t-tests near target vs far target for beta without aperiodic component, but without cleaning of data
dif_fbeta <- tt_fd$far_beta - tt_fd$near_beta
shapiro.test(dif_fbeta)
ttest_fbeta <- t.test(tt_fd$near_beta, tt_fd$far_beta, paired = T, "greater")
ttest_fbeta
mean(tt_fd$near_beta)
mean(tt_fd$far_beta)
