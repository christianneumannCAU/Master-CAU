ttest_fbeta <- t.test(tt_fd$near_beta, tt_fd$far_beta, paired = T, "greater")
ttest_fbeta
fbeta_id <- read.csv("../02_data/04_final/beta_ID_fd.csv")
View(fbeta_id)
fbeta_id == or_beta_id
mean(tt_fd$near_beta)
mean(tt_fd$far_beta)
View(ttd)
View(or_beta_id)
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
fbeta_id <- read.csv("../02_data/04_final/beta_ID_fd.csv")
View(fbeta_id)
fbeta_id <- read.csv("../02_data/04_final/beta_ID_fd.csv")
View(or_beta_id)
or_beta_id <- read.csv("../02_data/04_final/or_beta_ID.csv")
View(or_beta_id)
View(beta_id)
View(fbeta_id)
View(or_beta_id)
beta_id <- read.csv("../02_data/04_final/beta_depth_nf.csv")
View(beta_id)
beta_id <- read.csv("../02_data/04_final/beta_depth_nf.csv")
View(beta_id)
or_beta_depth_nf <- read.csv("../02_data/04_final/or_beta_depth_nf.csv")
rm(or_beta_id)
rm(beta_id)
beta_depth_nf <- read.csv("../02_data/04_final/beta_depth_nf.csv")
View(or_beta_depth_nf)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta_ID, ttd$near_beta)
View(or_beta_depth_nf)
View(or_beta_depth_nf)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
plot(or_beta_depth_nf$far_beta, ttd$far_beta)
plot(beta_depth_nf$far_beta, tt_tab$far_beta)
View(beta_depth_nf)
View(or_beta_depth_nf)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(or_beta_depth_nf$far_beta, ttd$far_beta)
plot(beta_depth_nf$far_beta, tt_tab$far_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
plot(or_beta_depth_nf$far_beta, ttd$far_beta)
plot(beta_depth_nf$far_beta, tt_tab$far_beta)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
## t-tests near target vs far target for beta without aperiodic component, but without cleaning of data
dif_fbeta <- tt_fd$far_beta - tt_fd$near_beta
shapiro.test(dif_fbeta)
ttest_fbeta <- t.test(tt_fd$near_beta, tt_fd$far_beta, paired = T, "greater")
ttest_fbeta
mean(tt_fd$near_beta)
mean(tt_fd$far_beta)
dif_theta <- tt_tab$far_theta - tt_tab$near_theta
dif_alpha <- tt_tab$far_alpha - tt_tab$near_alpha
shapiro.test(dif_theta)
shapiro.test(dif_alpha)
# we can assume normal distribution
ttest_theta <- t.test(tt_tab$near_theta, tt_tab$far_theta, paired = T, "greater")
ttest_theta
# we can assume normal distribution
ttest_theta <- t.test(tt_tab$near_theta, tt_tab$far_theta, paired = T, "less")
ttest_theta
# we can assume normal distribution
ttest_theta <- t.test(tt_tab$near_theta, tt_tab$far_theta, paired = T, "greater")
ttest_theta
ttest_alpha <- t.test(tt_tab$near_alpha, tt_tab$far_alpha, paired = T, "less")
ttest_alpha
ttest_theta
ttest_alpha
# AP_EXPONENT
hist(rg_tab$AP_EXPONENT)
qqnorm(rg_tab$AP_EXPONENT)
qqline(rg_tab$AP_EXPONENT)
ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
## Set libraries ##
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
# AP_EXPONENT
hist(rg_tab$AP_EXPONENT)
qqnorm(rg_tab$AP_EXPONENT)
qqline(rg_tab$AP_EXPONENT)
ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
#density plots for all 5
par(mfrow=c(2,2,1))
#density plots for all 5
par(mfrow=c(2,3))
ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggdensity(rg_tab, x = "root_mean_square", fill = "lightgray", title = "root_mean_square") +
scale_x_continuous(limits = c(-2, 30)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
install.packages(grid)
install.packages('grid')
## Set libraries ##
library(grid)
library(gridExtra)
library(cowplot)
install.packages('ggpubr')
library(ggpubr)
#density plots for all 5
A <- ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
B <- ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
C <- ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
D <- ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
E <- ggdensity(rg_tab, x = "root_mean_square", fill = "lightgray", title = "root_mean_square") +
scale_x_continuous(limits = c(-2, 30)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(A,B,C,ncol = 2, nrow = 3)
ggarrange(A,B,C,D,E,ncol = 2, nrow = 3)
# density plots for z-transformed variables
Az <- ggdensity(rg_tab, x = "z_exp", fill = "lightgray", title = "AP Exponent") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Bz <- ggdensity(rg_tab, x = "z_theta", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Cz <- ggdensity(rg_tab, x = "z_alpha", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Dz <- ggdensity(rg_tab, x = "z_beta", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Ez <- ggdensity(rg_tab, x = "z_rms", fill = "lightgray", title = "root mean square") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Az,Bz,Cz,Dz,Ez,ncol = 2, nrow = 3)
# THETA_POWER
Bl <- ggdensity(rg_tab, x = "l_theta", fill = "lightgray", title = "Theta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
Cl <- ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", title = "Alpha") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
Dl <- ggdensity(rg_tab, x = "l_beta", fill = "lightgray", title = "Beta") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Az,Bz,Cz,Dz,Ez,ncol = 2, nrow = 2)
ggarrange(Bl,Cl,Dl,ncol = 2, nrow = 2)
## Set libraries ##
library(grid)
library(gridExtra)
library(ggpubr)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
ggarrange(Az,Bz,Cz,Dz,Ez,ncol = 2, nrow = 3)
# density plots for z-transformed variables
Az <- ggdensity(rg_tab, x = "z_exp", fill = "lightgray", ylab = "Dichte", xlab = "aperoidischer Exponent") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Bz <- ggdensity(rg_tab, x = "z_theta", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Cz <- ggdensity(rg_tab, x = "z_alpha", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Dz <- ggdensity(rg_tab, x = "z_beta", fill = "lightgray", ylab = "Dichte", xlab = "Betapower") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Ez <- ggdensity(rg_tab, x = "z_rms", fill = "lightgray", ylab = "Dichte", xlab = "Quadratisches Mittel") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Az,Bz,Cz,Dz,Ez,ncol = 2, nrow = 3)
#density plots for all 5
A <- ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", ylab = "Dichte", xlab = "aperoidischer Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
B <- ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
C <- ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
D <- ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Betapower") +
scale_x_continuous(limits = c(-1, 2)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
E <- ggdensity(rg_tab, x = "root_mean_square", fill = "lightgray", ylab = "Dichte", xlab = "Quadratisches Mittel") +
scale_x_continuous(limits = c(-2, 30)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(A,B,C,D,E,ncol = 2, nrow = 3)
D <- ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Betapower") +
scale_x_continuous(limits = c(-1, 1)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(A,B,C,D,E,ncol = 2, nrow = 3)
D <- ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Betapower") +
scale_x_continuous(limits = c(-0.5, 1)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(A,B,C,D,E,ncol = 2, nrow = 3)
B <- ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower") +
scale_x_continuous(limits = c(-0.5, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
C <- ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower") +
scale_x_continuous(limits = c(-1, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(A,B,C,D,E,ncol = 2, nrow = 3)
ggarrange(Az,Bz,Cz,Dz,Ez,ncol = 2, nrow = 3)
# THETA_POWER
Bl <- ggdensity(rg_tab, x = "l_theta", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
Cl <- ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
Dl <- ggdensity(rg_tab, x = "l_beta", fill = "lightgray", ylab = "Dichte", xlab = "Betapower") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Bl,Cl,Dl,ncol = 2, nrow = 2)
# THETA_POWER
Bl <- ggdensity(rg_tab, x = "l_theta", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower") +
scale_x_continuous(limits = c(-5, 2.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
Cl <- ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower") +
scale_x_continuous(limits = c(-5, 2.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
Dl <- ggdensity(rg_tab, x = "l_beta", fill = "lightgray", ylab = "Dichte", xlab = "Betapower") +
scale_x_continuous(limits = c(-5, 2.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Bl,Cl,Dl,ncol = 2, nrow = 2)
# THETA_POWER
Bl <- ggdensity(rg_tab, x = "l_theta", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
Cl <- ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
Dl <- ggdensity(rg_tab, x = "l_beta", fill = "lightgray", ylab = "Dichte", xlab = "Betapower") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Bl,Cl,Dl,ncol = 2, nrow = 2)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
plot(or_beta_depth_nf$far_beta, ttd$far_beta)
plot(beta_depth_nf$far_beta, tt_tab$far_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
par(mfrow=c(2,2))
plot(or_beta_depth_nf$near_beta, ttd$near_beta)
plot(beta_depth_nf$near_beta, tt_tab$near_beta)
plot(or_beta_depth_nf$far_beta, ttd$far_beta)
plot(beta_depth_nf$far_beta, tt_tab$far_beta)
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta, xlab = "Tiefe "nah"", ylab = "Betapower (µV)")
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta, xlab = 'Tiefe "nah"', ylab = "Betapower (µV)", main = 'original Powerspektrum')
mean(tt_tab$near_beta, xlab = 'Tiefe "nah"', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(ttd$near_beta)
mean(tt_tab$near_beta)
mean(ttd$far_beta)
mean(tt_tab$far_beta)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
par(mfrow=c(2,2))
plot(or_beta_depth_nf$near_beta, ttd$near_beta, xlab = 'Tiefe "nah"', ylab = "Betapower (µV)", main = 'original Powerspektrum')
plot(beta_depth_nf$near_beta, tt_tab$near_beta, xlab = 'Tiefe "nah"', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
plot(or_beta_depth_nf$far_beta, ttd$far_beta, xlab = 'Tiefe "fern"', ylab = "Betapower (µV)", main = 'original Powerspektrum')
plot(beta_depth_nf$far_beta, tt_tab$far_beta, xlab = 'Tiefe "fern"', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
par(mfrow=c(2,2))
plot(or_beta_depth_nf$near_beta, ttd$near_beta, xlab = 'Tiefe "nah"', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
plot(beta_depth_nf$near_beta, tt_tab$near_beta, xlab = 'Tiefe "nah"', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
plot(or_beta_depth_nf$far_beta, ttd$far_beta, xlab = 'Tiefe "fern"', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
plot(beta_depth_nf$far_beta, tt_tab$far_beta, xlab = 'Tiefe "fern"', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
Bz <- ggdensity(rg_tab, x = "z_theta", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower (µV)") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Cz <- ggdensity(rg_tab, x = "z_alpha", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower (µV)") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Dz <- ggdensity(rg_tab, x = "z_beta", fill = "lightgray", ylab = "Dichte", xlab = "Betapower (µV)") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Az,Bz,Cz,Dz,Ez,ncol = 2, nrow = 3)
B <- ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower (µV)") +
scale_x_continuous(limits = c(-0.5, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
C <- ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower (µV)") +
scale_x_continuous(limits = c(-1, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
D <- ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Betapower (µV)") +
scale_x_continuous(limits = c(-0.5, 1)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(A,B,C,D,E,ncol = 2, nrow = 3)
# THETA_POWER
Bl <- ggdensity(rg_tab, x = "l_theta", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower (µV)") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
Cl <- ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower (µV)") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
Dl <- ggdensity(rg_tab, x = "l_beta", fill = "lightgray", ylab = "Dichte", xlab = "Betapower (µV)") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Bl,Cl,Dl,ncol = 2, nrow = 2)
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
par(mfrow=c(2,2))
plot(or_beta_depth_nf$near_beta, ttd$near_beta, xlab = 'Tiefe "nah" (mm)', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
plot(beta_depth_nf$near_beta, tt_tab$near_beta, xlab = 'Tiefe "nah" (mm)', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
plot(or_beta_depth_nf$far_beta, ttd$far_beta, xlab = 'Tiefe "fern" (mm)', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
plot(beta_depth_nf$far_beta, tt_tab$far_beta, xlab = 'Tiefe "fern" (mm)', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
View(ttest_beta)
View(tt_tab)
## Set libraries ##
library(grid)
library(gridExtra)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
ab <- rbind(tt_tab$near_beta,tt_tab$far_beta)
View(ab)
ab <- rbind(t(tt_tab$near_beta),t(tt_tab$far_beta))
t(tt_tab$near_beta)
tt_tab$near_beta
ab <- data.frame(tt_tab$near_beta)
ab <- data.frame(tt_tab$near_beta,c(rep('near',30)))
ac <- data.frame(tt_tab$far_beta,c(rep('far',30)))
ad <- rbind(ab,ac)
#boxplot
c1 <- data.frame(tt_tab$near_beta,c(rep('near',30)))
colnames(c1) <- c("Beta", "Bedingung")
rm(ab)
am(ac)
rm(ac)
rm(c1)
#boxplot
beta_col1 <- data.frame(tt_tab$near_beta,c(rep('near',30)))
colnames(beta_col1) <- c("Beta", "Bedingung")
View(beta_col1)
beta_col2 <- data.frame(tt_tab$far_beta,c(rep('far',30)))
colnames(beta_col2) <- c("Beta", "Bedingung")
View(beta_col2)
t_beta_plot <- rbind(beta_col1,beta_col2)
View(t_beta_plot)
ggplot(t_beta_plot, aes(x=Bedingung, y=Beta)) +
geom_boxplot()
#boxplot
rms_col1 <- data.frame(tt_tab$near_rms,c(rep('near',30)))
colnames(rms_col1) <- c("Quadratisches Mittel", "Bedingung")
rms_col2 <- data.frame(tt_tab$far_rms,c(rep('far',30)))
colnames(rms_col2) <- c("Quadratisches Mittel", "Bedingung")
t_rms_plot <- rbind(rms_col1,rms_col2)
ggplot(t_rms_plot, aes(x=Bedingung, y=Quadratisches Mittel)) +
geom_boxplot()
#boxplot
rms_col1 <- data.frame(tt_tab$near_rms,c(rep('near',30)))
colnames(rms_col1) <- c("Quadratisches_Mittel", "Bedingung")
rms_col2 <- data.frame(tt_tab$far_rms,c(rep('far',30)))
colnames(rms_col2) <- c("Quadratisches_Mittel", "Bedingung")
t_rms_plot <- rbind(rms_col1,rms_col2)
ggplot(t_rms_plot, aes(x=Bedingung, y=Quadratisches_Mittel)) +
geom_boxplot()
#boxplot
beta_col1 <- data.frame(tt_tab$near_beta,c(rep('near',30)))
colnames(beta_col1) <- c("Betapower", "Bedingung")
beta_col2 <- data.frame(tt_tab$far_beta,c(rep('far',30)))
colnames(beta_col2) <- c("Betapower", "Bedingung")
t_beta_plot <- rbind(beta_col1,beta_col2)
ggplot(t_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot()
#boxplot
exp_col1 <- data.frame(tt_tab$near_exp,c(rep('near',30)))
colnames(exp_col1) <- c("Aperiodischer_Exponent", "Bedingung")
exp_col2 <- data.frame(tt_tab$far_exp,c(rep('far',30)))
colnames(exp_col2) <- c("Aperiodischer_Exponent", "Bedingung")
t_exp_plot <- rbind(exp_col1,exp_col2)
ggplot(t_rms_plot, aes(x=Bedingung, y=Aperiodischer_Exponent)) +
geom_boxplot()
View(t_exp_plot)
#boxplot
exp_col1 <- data.frame(tt_tab$near_exp,c(rep('near',30)))
colnames(exp_col1) <- c("Aperiodischer_Exponent", "Bedingung")
exp_col2 <- data.frame(tt_tab$far_exp,c(rep('far',30)))
colnames(exp_col2) <- c("Aperiodischer_Exponent", "Bedingung")
t_exp_plot <- rbind(exp_col1,exp_col2)
ggplot(t_exp_plot, aes(x=Bedingung, y=Aperiodischer_Exponent)) +
geom_boxplot()
#boxplot
beta_col1 <- data.frame(tt_tab$near_beta,c(rep('"nah"',30)))
colnames(beta_col1) <- c("Betapower", "Bedingung")
beta_col2 <- data.frame(tt_tab$far_beta,c(rep('"fern"',30)))
colnames(beta_col2) <- c("Betapower", "Bedingung")
t_beta_plot <- rbind(beta_col1,beta_col2)
ggplot(t_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot()
#boxplot
rms_col1 <- data.frame(tt_tab$near_rms,c(rep('"nah"',30)))
colnames(rms_col1) <- c("Quadratisches_Mittel", "Bedingung")
rms_col2 <- data.frame(tt_tab$far_rms,c(rep('"fern"',30)))
colnames(rms_col2) <- c("Quadratisches_Mittel", "Bedingung")
t_rms_plot <- rbind(rms_col1,rms_col2)
ggplot(t_rms_plot, aes(x=Bedingung, y=Quadratisches_Mittel)) +
geom_boxplot()
#boxplot
exp_col1 <- data.frame(tt_tab$near_exp,c(rep('"nah"',30)))
colnames(exp_col1) <- c("Aperiodischer_Exponent", "Bedingung")
exp_col2 <- data.frame(tt_tab$far_exp,c(rep('"fern"',30)))
colnames(exp_col2) <- c("Aperiodischer_Exponent", "Bedingung")
t_exp_plot <- rbind(exp_col1,exp_col2)
ggplot(t_exp_plot, aes(x=Bedingung, y=Aperiodischer_Exponent)) +
geom_boxplot()
#boxplot
theta_col1 <- data.frame(tt_tab$near_theta,c(rep('"nah"',30)))
colnames(theta_col1) <- c("Thetapower", "Bedingung")
theta_col2 <- data.frame(tt_tab$far_theta,c(rep('"fern"',30)))
colnames(theta_col2) <- c("Thetapower", "Bedingung")
t_theta_plot <- rbind(theta_col1,theta_col2)
ggplot(t_theta_plot, aes(x=Bedingung, y=Thetapower)) +
geom_boxplot()
ggplot(t_beta_plot, aes(x=Bedingung, y=Betapower), ylab = "Betapower (µV)") +
geom_boxplot()
ggplot(t_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
ggplot(t_theta_plot, aes(x=Bedingung, y=Thetapower)) +
geom_boxplot() + labs(y = "Thetapower (µV)")
#boxplot
alpha_col1 <- data.frame(tt_tab$near_alpha,c(rep('"nah"',30)))
colnames(alpha_col1) <- c("Alphapower", "Bedingung")
alpha_col2 <- data.frame(tt_tab$far_alpha,c(rep('"fern"',30)))
colnames(alpha_col2) <- c("Alphapower", "Bedingung")
t_alpha_plot <- rbind(alpha_col1,alpha_col2)
ggplot(t_alpha_plot, aes(x=Bedingung, y=Alphapower)) +
geom_boxplot() + labs(y = "Alphapower (µV)")
#boxplot
d_beta_col1 <- data.frame(ttd$near_beta,c(rep('"nah"',30)))
colnames(d_beta_col1) <- c("Betapower", "Bedingung")
d_beta_col2 <- data.frame(ttd$far_beta,c(rep('"fern"',30)))
colnames(d_beta_col2) <- c("Betapower", "Bedingung")
t_d_beta_plot <- rbind(d_beta_col1,d_beta_col2)
ggplot(t_d_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
ggplot(t_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
ggplot(t_rms_plot, aes(x=Bedingung, y=Quadratisches_Mittel)) +
geom_boxplot() + labs(y = "Quadratisches Mittel")
ggplot(t_exp_plot, aes(x=Bedingung, y=Aperiodischer_Exponent)) +
geom_boxplot() + labs(y = "Aperiodischer Exponent")
# both boxplots
ggarrange(thetabox, alphabox, ncol = 2, nrow = 1)
thetabox <- ggplot(t_theta_plot, aes(x=Bedingung, y=Thetapower)) +
geom_boxplot() + labs(y = "Thetapower (µV)")
alphabox <- ggplot(t_alpha_plot, aes(x=Bedingung, y=Alphapower)) +
geom_boxplot() + labs(y = "Alphapower (µV)")
# both boxplots
ggarrange(thetabox, alphabox, ncol = 2, nrow = 1)
ggplot(t_d_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
