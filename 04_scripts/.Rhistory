library(gridExtra)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
library(lme4)
library(lmerTest)
library(ggeffects)
ggplot(t_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
ttest_beta <- t.test(tt_tab$near_beta, tt_tab$far_beta, paired = T, "greater")
ttest_beta
# H.1.2 compare rms near target with far from target
# check normal distribution of difference for paired t-test
dif_rms <- tt_tab$far_rms - tt_tab$near_rms
shapiro.test(dif_rms)
#boxplot
rms_col1 <- data.frame(tt_tab$near_rms,c(rep('"nah"',26)))
colnames(rms_col1) <- c("RMS", "Bedingung")
rms_col2 <- data.frame(tt_tab$far_rms,c(rep('"fern"',26)))
colnames(rms_col2) <- c("RMS", "Bedingung")
t_rms_plot <- rbind(rms_col1,rms_col2)
ggplot(t_rms_plot, aes(x=Bedingung, y=RMS)) +
geom_boxplot() + labs(y = "RMS")
length(tt_tab)
length(rg_tab)
max(rg_tab$ID)
max(num(rg_tab$ID))
ttest_rms <- t.test(tt_tab$near_rms, tt_tab$far_rms, paired = T, "greater")
ttest_rms
##H2.1 compare aperiodic exponent near target with far from target
# check normal distribution of difference for paired t-test
dif_exp <- tt_tab$far_exp - tt_tab$near_exp
shapiro.test(dif_exp)
#boxplot
exp_col1 <- data.frame(tt_tab$near_exp,c(rep('"nah"',26)))
colnames(exp_col1) <- c("Aperiodischer_Exponent", "Bedingung")
exp_col2 <- data.frame(tt_tab$far_exp,c(rep('"fern"',26)))
colnames(exp_col2) <- c("Aperiodischer_Exponent", "Bedingung")
t_exp_plot <- rbind(exp_col1,exp_col2)
ggplot(t_exp_plot, aes(x=Bedingung, y=Aperiodischer_Exponent)) +
geom_boxplot() + labs(y = "Aperiodischer Exponent")
ttest_exp <- t.test(tt_tab$near_exp, tt_tab$far_exp, paired = T, "less")
ttest_exp
## H2.2
ggdensity(rg_tab, x = "DEPTH", fill = "lightgray", ylab = "Dichte", xlab = "Tiefe der Elektrode (in mm)") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
h2reg <- lmer(DEPTH ~ 1 + z_exp + (1|ID), data=rg_tab)
plot(h2reg, which = 1, xlab = "Vorhergesagter Wert für die Tiefe", ylab = "Residuen", main = "Darstellung der Residuen")
# Extract the prediction data frame
pred.mm <- ggpredict(h2reg, terms = c("z_exp"))  # this gives overall predictions for the model
# Plot the predictions
(ggplot(pred.mm) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = rg_tab,                      # adding the raw data (scaled values)
aes(x = z_exp, y = DEPTH, colour = ID)) +
labs(x = "Aperiodischer Exponent", y = "Tiefe der Elektrode (in mm)",
title = "Zusammenhang zwischen Aperiodischem Exponenten und Tiefe der Elektrode") +
theme_minimal())
summary(h2reg)
confint(h2reg)
full_model <- lmer(DEPTH ~ 1 + z_exp + + z_theta + z_alpha + z_beta + z_rms + (1|ID), data=rg_tab)
summary(full_model)
summary(full_model)
confint(full_model)
plot(full_model, which = 1, xlab = "Vorhergesagter Wert für die Tiefe", ylab = "Residuen", main = "Darstellung der Residuen")
best_model <- step(full_model)
print(best_model)
best_reg <- lmer(DEPTH ~ 1 + z_rms + z_theta + (1|ID), data=rg_tab)
# Extract the prediction data frame
pred.mm <- ggpredict(best_reg, terms = c("z_rms"))  # this gives overall predictions for the model
# Plot the predictions
(ggplot(pred.mm) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = rg_tab,                      # adding the raw data (scaled values)
aes(x = z_rms, y = DEPTH, colour = ID)) +
labs(x = "RMS", y = "Tiefe der Elektrode (in mm)",
title = "Zusammenhang zwischen RMS und Tiefe der Elektrode") +
theme_minimal())
full_model <- lmer(DEPTH ~ 1 + z_exp + z_theta + z_alpha + z_beta + z_rms + (1|ID), data=rg_tab)
## Set libraries ##
library(grid)
library(gridExtra)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
library(lme4)
library(lmerTest)
library(ggeffects)
full_model <- lmer(DEPTH ~ 1 + z_exp + z_theta + z_alpha + z_beta + z_rms + (1|ID), data=rg_tab)
summary(full_model)
dif_theta <- tt_tab$far_theta - tt_tab$near_theta
dif_alpha <- tt_tab$far_alpha - tt_tab$near_alpha
shapiro.test(dif_theta)
shapiro.test(dif_alpha)
# we can assume normal distribution
ttest_theta <- t.test(tt_tab$near_theta, tt_tab$far_theta, paired = T, "greater")
ttest_theta
ttest_alpha <- t.test(tt_tab$near_alpha, tt_tab$far_alpha, paired = T, "less")
ttest_alpha
## t-tests near target vs far target for low-beta and high beta
# low-beta
dif_lbeta <- tt_tab$far_lbeta - tt_tab$near_lbeta
shapiro.test(dif_lbeta)
# high-beta
dif_hbeta <- tt_tab$far_hbeta - tt_tab$near_hbeta
shapiro.test(dif_hbeta)
ttest_lbeta <- t.test(tt_tab$near_lbeta, tt_tab$far_lbeta, paired = T, "greater")
ttest_lbeta #not significant
ttest_hbeta <- t.test(tt_tab$near_hbeta, tt_tab$far_hbeta, paired = T, "greater")
ttest_hbeta # not significant
## compare beta near target with far from target again but with original powerspectrum
# check normal distribution of difference for paired t-test
dif_beta_e <- tt_e$far_beta - tt_e$near_beta
shapiro.test(dif_beta_e)
View(tt_e)
View(tt_e)
View(tt_tab)
View(tt_fd)
tt_e <- read.csv("../02_data/04_final/ttest_table_exploring.csv") #data for t-test but with original spectrum
View(tt_e)
tt_e <- read.csv("../02_data/04_final/ttest_table_exploring.csv") #data for t-test but with original spectrum
View(tt_e)
## compare beta near target with far from target again but with original powerspectrum
# check normal distribution of difference for paired t-test
dif_beta_e <- tt_e$far_beta - tt_e$near_beta
shapiro.test(dif_beta_e)
#boxplot
e_beta_col1 <- data.frame(tt_e$near_beta,c(rep('"nah"',26)))
colnames(e_beta_col1) <- c("Betapower", "Bedingung")
e_beta_col2 <- data.frame(tt_e$far_beta,c(rep('"fern"',26)))
colnames(e_beta_col2) <- c("Betapower", "Bedingung")
t_e_beta_plot <- rbind(e_beta_col1,e_beta_col2)
ggplot(t_e_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
ttest_beta_e <- t.test(tt_e$near_beta, tt_e$far_beta, paired = T, "greater")
ttest_beta_e #significant
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
par(mfrow=c(2,2))
plot(or_beta_depth_nf$near_beta, ttd$near_beta, xlab = 'Tiefe "nah" (mm)', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
par(mfrow=c(2,2))
plot(or_beta_depth_nf$near_beta, tt_e$near_beta, xlab = 'Tiefe "nah" (mm)', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
plot(beta_depth_nf$near_beta, tt_tab$near_beta, xlab = 'Tiefe "nah" (mm)', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
plot(or_beta_depth_nf$far_beta, tt_e$far_beta, xlab = 'Tiefe "fern" (mm)', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
plot(beta_depth_nf$far_beta, tt_tab$far_beta, xlab = 'Tiefe "fern" (mm)', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(tt_e$near_beta)
mean(tt_tab$near_beta)
mean(tt_e$far_beta)
mean(tt_tab$far_beta)
#boxplot for means when using fooof but without deleting channels with bad fit
fd_beta_col1 <- data.frame(tt_fd$near_beta,c(rep('"nah"',26)))
colnames(fd_beta_col1) <- c("Betapower", "Bedingung")
fd_beta_col2 <- data.frame(tt_fd$far_beta,c(rep('"fern"',26)))
colnames(fd_beta_col2) <- c("Betapower", "Bedingung")
t_fd_beta_plot <- rbind(fd_beta_col1,fd_beta_col2)
ggplot(t_fd_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
max(as.numeric(rg_tab$ID))
#boxplot
rms_col1 <- data.frame(tt_tab$near_rms,c(rep('"nah"',max(as.numeric(rg_tab$ID)))))
colnames(rms_col1) <- c("RMS", "Bedingung")
rms_col2 <- data.frame(tt_tab$far_rms,c(rep('"fern"',max(as.numeric(rg_tab$ID)))))
colnames(rms_col2) <- c("RMS", "Bedingung")
t_rms_plot <- rbind(rms_col1,rms_col2)
ggplot(t_rms_plot, aes(x=Bedingung, y=RMS)) +
geom_boxplot() + labs(y = "RMS")
## Set libraries ##
library(grid)
library(gridExtra)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
library(lme4)
library(lmerTest)
library(ggeffects)
ggplot(t_rms_plot, aes(x=Bedingung, y=RMS)) +
geom_boxplot() + labs(y = "RMS")
## Set libraries ##
library(grid)
library(gridExtra)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
library(lme4)
library(lmerTest)
library(ggeffects)
## read data ##
rg_tab <- read.csv("../02_data/04_final/regression_table.csv") #data for regression
## read data ##
rg_tab <- read.csv("../02_data/04_final/regression_table.csv") #data for regression
tt_tab <- read.csv("../02_data/04_final/ttest_table.csv") #data for t-test
rg_e <- read.csv("../02_data/04_final/regression_table_exploring.csv") #data for regression but without sorting out channels with a bad fit
tt_e <- read.csv("../02_data/04_final/ttest_table_exploring.csv") #data for t-test but with original spectrum
beta_depth_nf <- read.csv("../02_data/04_final/beta_depth_nf.csv") # the depths that got chosen for "near" and "far"
or_beta_depth_nf <- read.csv("../02_data/04_final/or_beta_depth_nf.csv") # the depths that got chosen for "near" and "far" but for original spectrum
rg_fd <- read.csv("../02_data/04_final/regression_table_wobadfit.csv")
tt_fd <- read.csv("../02_data/04_final/ttest_table_wobadfit.csv")
## Assign data types ##
rg_tab$ID <- as.factor(rg_tab$ID)
rg_tab$SIDE <- as.factor(rg_tab$SIDE)
rg_tab$CHANNEL <- as.factor(rg_tab$CHANNEL)
## Test for normal distribution is bad: gets significant automatically with big samplesize ##
shapiro.test(rg_tab$AP_EXPONENT)
# AP_EXPONENT
hist(rg_tab$AP_EXPONENT)
qqnorm(rg_tab$AP_EXPONENT)
qqline(rg_tab$AP_EXPONENT)
# THETA_POWER
hist(rg_tab$THETA_POWER)
qqnorm(rg_tab$THETA_POWER)
qqline(rg_tab$THETA_POWER)
# ALPHA_POWER
hist(rg_tab$ALPHA_POWER)
qqnorm(rg_tab$ALPHA_POWER)
qqline(rg_tab$ALPHA_POWER)
# BETA_POWER
hist(rg_tab$BETA_POWER)
qqnorm(rg_tab$BETA_POWER)
qqline(rg_tab$BETA_POWER)
# root mean square
hist(rg_tab$root_mean_square)
qqnorm(rg_tab$root_mean_square)
qqline(rg_tab$root_mean_square)
#density plots for all 5
A <- ggdensity(rg_tab, x = "AP_EXPONENT", fill = "lightgray", ylab = "Dichte", xlab = "aperoidischer Exponent") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
B <- ggdensity(rg_tab, x = "THETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower (µV)") +
scale_x_continuous(limits = c(-0.5, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
C <- ggdensity(rg_tab, x = "ALPHA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower (µV)") +
scale_x_continuous(limits = c(-1, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
D <- ggdensity(rg_tab, x = "BETA_POWER", fill = "lightgray", ylab = "Dichte", xlab = "Betapower (µV)") +
scale_x_continuous(limits = c(-0.5, 1)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
E <- ggdensity(rg_tab, x = "root_mean_square", fill = "lightgray", ylab = "Dichte", xlab = "RMS") +
scale_x_continuous(limits = c(-2, 30)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(A,B,C,D,E,ncol = 2, nrow = 3)
# AP_EXPONENT
hist(rg_tab$z_exp)
qqnorm(rg_tab$z_exp)
qqline(rg_tab$z_exp)
# THETA_POWER
hist(rg_tab$z_theta)
qqnorm(rg_tab$z_theta)
qqline(rg_tab$z_theta)
# ALPHA_POWER
hist(rg_tab$z_alpha)
qqnorm(rg_tab$z_alpha)
qqline(rg_tab$z_alpha)
# BETA_POWER
hist(rg_tab$z_beta)
qqnorm(rg_tab$z_beta)
qqline(rg_tab$z_beta)
# root mean square
hist(rg_tab$z_rms)
qqnorm(rg_tab$z_rms)
qqline(rg_tab$z_rms)
# density plots for z-transformed variables
Az <- ggdensity(rg_tab, x = "z_exp", fill = "lightgray", ylab = "Dichte", xlab = "aperoidischer Exponent") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Bz <- ggdensity(rg_tab, x = "z_theta", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower (µV)") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Cz <- ggdensity(rg_tab, x = "z_alpha", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower (µV)") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Dz <- ggdensity(rg_tab, x = "z_beta", fill = "lightgray", ylab = "Dichte", xlab = "Betapower (µV)") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
Ez <- ggdensity(rg_tab, x = "z_rms", fill = "lightgray", ylab = "Dichte", xlab = "RMS") +
scale_x_continuous(limits = c(-5, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Az,Bz,Cz,Dz,Ez,ncol = 2, nrow = 3)
## try log-transformation ##
rg_tab$l_theta <- log10(rg_tab$THETA_POWER)
rg_tab$l_alpha <- log10(rg_tab$ALPHA_POWER)
rg_tab$l_beta <- log10(rg_tab$BETA_POWER)
# THETA_POWER
Bl <- ggdensity(rg_tab, x = "l_theta", fill = "lightgray", ylab = "Dichte", xlab = "Thetapower (µV)") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# ALPHA_POWER
Cl <- ggdensity(rg_tab, x = "l_alpha", fill = "lightgray", ylab = "Dichte", xlab = "Alphapower (µV)") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
# BETA_POWER
Dl <- ggdensity(rg_tab, x = "l_beta", fill = "lightgray", ylab = "Dichte", xlab = "Betapower (µV)") +
scale_x_continuous(limits = c(-3, 1.5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
ggarrange(Bl,Cl,Dl,ncol = 2, nrow = 2)
## H1.1 compare beta near target with far from target
# check normal distribution of difference for paired t-test
dif_beta <- tt_tab$far_beta - tt_tab$near_beta
shapiro.test(dif_beta)
#boxplot
beta_col1 <- data.frame(tt_tab$near_beta,c(rep('"nah"',max(as.numeric(rg_tab$ID)))))
colnames(beta_col1) <- c("Betapower", "Bedingung")
beta_col2 <- data.frame(tt_tab$far_beta,c(rep('"fern"',max(as.numeric(rg_tab$ID)))))
colnames(beta_col2) <- c("Betapower", "Bedingung")
t_beta_plot <- rbind(beta_col1,beta_col2)
ggplot(t_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
ttest_beta <- t.test(tt_tab$near_beta, tt_tab$far_beta, paired = T, "greater")
ttest_beta
# H.1.2 compare rms near target with far from target
# check normal distribution of difference for paired t-test
dif_rms <- tt_tab$far_rms - tt_tab$near_rms
shapiro.test(dif_rms)
#boxplot
rms_col1 <- data.frame(tt_tab$near_rms,c(rep('"nah"',max(as.numeric(rg_tab$ID)))))
colnames(rms_col1) <- c("RMS", "Bedingung")
rms_col2 <- data.frame(tt_tab$far_rms,c(rep('"fern"',max(as.numeric(rg_tab$ID)))))
colnames(rms_col2) <- c("RMS", "Bedingung")
t_rms_plot <- rbind(rms_col1,rms_col2)
ggplot(t_rms_plot, aes(x=Bedingung, y=RMS)) +
geom_boxplot() + labs(y = "RMS")
ttest_rms <- t.test(tt_tab$near_rms, tt_tab$far_rms, paired = T, "greater")
ttest_rms
##H2.1 compare aperiodic exponent near target with far from target
# check normal distribution of difference for paired t-test
dif_exp <- tt_tab$far_exp - tt_tab$near_exp
shapiro.test(dif_exp)
#boxplot
exp_col1 <- data.frame(tt_tab$near_exp,c(rep('"nah"',max(as.numeric(rg_tab$ID)))))
colnames(exp_col1) <- c("Aperiodischer_Exponent", "Bedingung")
exp_col2 <- data.frame(tt_tab$far_exp,c(rep('"fern"',max(as.numeric(rg_tab$ID)))))
colnames(exp_col2) <- c("Aperiodischer_Exponent", "Bedingung")
t_exp_plot <- rbind(exp_col1,exp_col2)
ggplot(t_exp_plot, aes(x=Bedingung, y=Aperiodischer_Exponent)) +
geom_boxplot() + labs(y = "Aperiodischer Exponent")
ttest_exp <- t.test(tt_tab$near_exp, tt_tab$far_exp, paired = T, "less")
ttest_exp
## H2.2
ggdensity(rg_tab, x = "DEPTH", fill = "lightgray", ylab = "Dichte", xlab = "Tiefe der Elektrode (in mm)") +
scale_x_continuous(limits = c(-2, 5)) +
stat_overlay_normal_density(color = "red", linetype = "dashed")
h2reg <- lmer(DEPTH ~ 1 + z_exp + (1|ID), data=rg_tab)
plot(h2reg, which = 1, xlab = "Vorhergesagter Wert für die Tiefe", ylab = "Residuen", main = "Darstellung der Residuen")
# Extract the prediction data frame
pred.mm <- ggpredict(h2reg, terms = c("z_exp"))  # this gives overall predictions for the model
# Plot the predictions
(ggplot(pred.mm) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = rg_tab,                      # adding the raw data (scaled values)
aes(x = z_exp, y = DEPTH, colour = ID)) +
labs(x = "Aperiodischer Exponent", y = "Tiefe der Elektrode (in mm)",
title = "Zusammenhang zwischen Aperiodischem Exponenten und Tiefe der Elektrode") +
theme_minimal())
summary(h2reg)
confint(h2reg)
full_model <- lmer(DEPTH ~ 1 + z_exp + z_theta + z_alpha + z_beta + z_rms + (1|ID), data=rg_tab)
summary(full_model)
confint(full_model)
plot(full_model, which = 1, xlab = "Vorhergesagter Wert für die Tiefe", ylab = "Residuen", main = "Darstellung der Residuen")
best_model <- step(full_model)
print(best_model)
best_reg <- lmer(DEPTH ~ 1 + z_rms + z_theta + (1|ID), data=rg_tab)
# Extract the prediction data frame
pred.mm <- ggpredict(best_reg, terms = c("z_rms"))  # this gives overall predictions for the model
# Plot the predictions
(ggplot(pred.mm) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = rg_tab,                      # adding the raw data (scaled values)
aes(x = z_rms, y = DEPTH, colour = ID)) +
labs(x = "RMS", y = "Tiefe der Elektrode (in mm)",
title = "Zusammenhang zwischen RMS und Tiefe der Elektrode") +
theme_minimal())
dif_theta <- tt_tab$far_theta - tt_tab$near_theta
dif_alpha <- tt_tab$far_alpha - tt_tab$near_alpha
shapiro.test(dif_theta)
shapiro.test(dif_alpha)
# we can assume normal distribution
ttest_theta <- t.test(tt_tab$near_theta, tt_tab$far_theta, paired = T, "greater")
ttest_theta
ttest_alpha <- t.test(tt_tab$near_alpha, tt_tab$far_alpha, paired = T, "less")
ttest_alpha
## t-tests near target vs far target for low-beta and high beta
# low-beta
dif_lbeta <- tt_tab$far_lbeta - tt_tab$near_lbeta
shapiro.test(dif_lbeta)
# high-beta
dif_hbeta <- tt_tab$far_hbeta - tt_tab$near_hbeta
shapiro.test(dif_hbeta)
ttest_lbeta <- t.test(tt_tab$near_lbeta, tt_tab$far_lbeta, paired = T, "greater")
ttest_lbeta #not significant
ttest_hbeta <- t.test(tt_tab$near_hbeta, tt_tab$far_hbeta, paired = T, "greater")
ttest_hbeta # not significant
## compare beta near target with far from target again but with original powerspectrum
# check normal distribution of difference for paired t-test
dif_beta_e <- tt_e$far_beta - tt_e$near_beta
shapiro.test(dif_beta_e)
#boxplot
e_beta_col1 <- data.frame(tt_e$near_beta,c(rep('"nah"',max(as.numeric(rg_tab$ID)))))
colnames(e_beta_col1) <- c("Betapower", "Bedingung")
e_beta_col2 <- data.frame(tt_e$far_beta,c(rep('"fern"',max(as.numeric(rg_tab$ID)))))
colnames(e_beta_col2) <- c("Betapower", "Bedingung")
t_e_beta_plot <- rbind(e_beta_col1,e_beta_col2)
ggplot(t_e_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
ttest_beta_e <- t.test(tt_e$near_beta, tt_e$far_beta, paired = T, "greater")
ttest_beta_e #significant
# compare depth of channels near target for original powerspectrum vs powerspectrum after fooof
par(mfrow=c(2,2))
plot(or_beta_depth_nf$near_beta, tt_e$near_beta, xlab = 'Tiefe "nah" (mm)', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
plot(beta_depth_nf$near_beta, tt_tab$near_beta, xlab = 'Tiefe "nah" (mm)', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
plot(or_beta_depth_nf$far_beta, tt_e$far_beta, xlab = 'Tiefe "fern" (mm)', ylab = "Betapower (µV)", main = 'Originales Powerspektrum')
plot(beta_depth_nf$far_beta, tt_tab$far_beta, xlab = 'Tiefe "fern" (mm)', ylab = "Betapower (µV)", main = 'Powerspektrum nach FOOOF-Algorithmus')
# compare power of channels near target for original powerspectrum vs powerspectrum after fooof
mean(tt_e$near_beta)
mean(tt_tab$near_beta)
mean(tt_e$far_beta)
mean(tt_tab$far_beta)
#boxplot for means when using fooof but without deleting channels with bad fit
fd_beta_col1 <- data.frame(tt_fd$near_beta,c(rep('"nah"',max(as.numeric(rg_tab$ID)))))
colnames(fd_beta_col1) <- c("Betapower", "Bedingung")
fd_beta_col2 <- data.frame(tt_fd$far_beta,c(rep('"fern"',max(as.numeric(rg_tab$ID)))))
colnames(fd_beta_col2) <- c("Betapower", "Bedingung")
t_fd_beta_plot <- rbind(fd_beta_col1,fd_beta_col2)
ggplot(t_fd_beta_plot, aes(x=Bedingung, y=Betapower)) +
geom_boxplot() + labs(y = "Betapower (µV)")
## Set libraries ##
library(grid)
library(gridExtra)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
library(lme4)
library(lmerTest)
library(ggeffects)
# Plot the predictions
(ggplot(pred.mm) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = rg_tab,                      # adding the raw data (scaled values)
aes(x = z_exp, y = DEPTH, colour = ID)) +
labs(x = "Aperiodischer Exponent", y = "Tiefe der Elektrode (in mm)") +
theme_minimal())
# Extract the prediction data frame
pred.mm <- ggpredict(h2reg, terms = c("z_exp"))  # this gives overall predictions for the model
# Plot the predictions
(ggplot(pred.mm) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = rg_tab,                      # adding the raw data (scaled values)
aes(x = z_exp, y = DEPTH, colour = ID)) +
labs(x = "Aperiodischer Exponent", y = "Tiefe der Elektrode (in mm)") +
theme_minimal())
plot(h2reg, which = 1, xlab = "Vorhergesagter Wert für die Tiefe", ylab = "Residuen")
summary(full_model)
table1 <- summary(full_model)
table1
table1 <- summary(full_model)
View(table1)
table1$coefficients
table1 <- table1$coefficients
View(table1)
print(best_model)
# Extract the prediction data frame
pred.mm <- ggpredict(best_reg, terms = c("z_rms"))  # this gives overall predictions for the model
# Plot the predictions
(ggplot(pred.mm) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = rg_tab,                      # adding the raw data (scaled values)
aes(x = z_rms, y = DEPTH, colour = ID)) +
labs(x = "RMS", y = "Tiefe der Elektrode (in mm)") +
theme_minimal())
best_reg
## Set libraries ##
library(grid)
library(gridExtra)
library(ggplot2)
library(ggpubr)
library(moments)
library(nlme)
library(lme4)
library(lmerTest)
library(ggeffects)
best_reg
# Extract the prediction data frame
pred.mm <- ggpredict(best_reg, terms = c("z_rms","z_theta"))  # this gives overall predictions for the model
# Plot the predictions
(ggplot(pred.mm) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = rg_tab,                      # adding the raw data (scaled values)
aes(x = z_rms, y = DEPTH, colour = ID)) +
labs(x = "RMS + Thetapower", y = "Tiefe der Elektrode (in mm)") +
theme_minimal())
